/** ***********************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
************************************************************************ */

/*
 *  Package: @aemforms/af-core
 *  Version: 0.22.150
 */
import {
  propertyChange as e, ExecuteRule as t, Initialize as i, RemoveItem as n, Change as s, FormLoad as r, FieldChanged as a, ValidationComplete as o, Valid as l, Invalid as u, SubmitSuccess as d, CustomEvent as h, RequestSuccess as c, RequestFailure as p, SubmitError as m, Submit as f, Save as g, Reset as _, SubmitFailure as y, Focus as v, RemoveInstance as M, AddInstance as b, AddItem as j, Click as E,
} from './afb-events.min.js'; import x from '../formula/index.min.js'; import {
  format as w, parseDefaultDate as T, datetimeToNumber as I, parseDateSkeleton as D, numberToDatetime as $, formatDate as N, parseDate as S,
} from './afb-formatters.min.js';

function O(e, t, i, n) { let s; const r = arguments.length; let a = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n; if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')a = Reflect.decorate(e, t, i, n); else for (let o = e.length - 1; o >= 0; o--)(s = e[o]) && (a = (r < 3 ? s(a) : r > 3 ? s(t, i, a) : s(t, i)) || a); return r > 3 && a && Object.defineProperty(t, i, a), a; } const C = Object.freeze({
  PATTERN_MISMATCH: 'patternMismatch', TOO_SHORT: 'tooShort', TOO_LONG: 'tooLong', RANGE_OVERFLOW: 'rangeOverflow', RANGE_UNDERFLOW: 'rangeUnderflow', TYPE_MISMATCH: 'typeMismatch', VALUE_MISSING: 'valueMissing', STEP_MISMATCH: 'stepMismatch', FORMAT_MISMATCH: 'formatMismatch', ACCEPT_MISMATCH: 'acceptMismatch', FILE_SIZE_MISMATCH: 'fileSizeMismatch', UNIQUE_ITEMS_MISMATCH: 'uniqueItemsMismatch', MIN_ITEMS_MISMATCH: 'minItemsMismatch', MAX_ITEMS_MISMATCH: 'maxItemsMismatch', EXPRESSION_MISMATCH: 'expressionMismatch', EXCLUSIVE_MAXIMUM_MISMATCH: 'exclusiveMaximumMismatch', EXCLUSIVE_MINIMUM_MISMATCH: 'exclusiveMinimumMismatch',
}); const A = Object.freeze({
  pattern: C.PATTERN_MISMATCH, minLength: C.TOO_SHORT, maxLength: C.TOO_LONG, maximum: C.RANGE_OVERFLOW, minimum: C.RANGE_UNDERFLOW, type: C.TYPE_MISMATCH, required: C.VALUE_MISSING, step: C.STEP_MISMATCH, format: C.FORMAT_MISMATCH, accept: C.ACCEPT_MISMATCH, maxFileSize: C.FILE_SIZE_MISMATCH, uniqueItems: C.UNIQUE_ITEMS_MISMATCH, minItems: C.MIN_ITEMS_MISMATCH, maxItems: C.MAX_ITEMS_MISMATCH, validationExpression: C.EXPRESSION_MISMATCH, exclusiveMinimum: C.EXCLUSIVE_MINIMUM_MISMATCH, exclusiveMaximum: C.EXCLUSIVE_MAXIMUM_MISMATCH,
}); const F = Object.freeze({
  [C.PATTERN_MISMATCH]: 'Please match the format requested.', [C.TOO_SHORT]: 'Please lengthen this text to ${0} characters or more.', [C.TOO_LONG]: 'Please shorten this text to ${0} characters or less.', [C.RANGE_OVERFLOW]: 'Value must be less than or equal to ${0}.', [C.RANGE_UNDERFLOW]: 'Value must be greater than or equal to ${0}.', [C.TYPE_MISMATCH]: 'Please enter a valid value.', [C.VALUE_MISSING]: 'Please fill in this field.', [C.STEP_MISMATCH]: 'Please enter a valid value.', [C.FORMAT_MISMATCH]: 'Specify the value in allowed format : ${0}.', [C.ACCEPT_MISMATCH]: 'The specified file type not supported.', [C.FILE_SIZE_MISMATCH]: 'File too large. Reduce size and try again.', [C.UNIQUE_ITEMS_MISMATCH]: 'All the items must be unique.', [C.MIN_ITEMS_MISMATCH]: 'Specify a number of items equal to or greater than ${0}.', [C.MAX_ITEMS_MISMATCH]: 'Specify a number of items equal to or less than ${0}.', [C.EXPRESSION_MISMATCH]: 'Please enter a valid value.', [C.EXCLUSIVE_MINIMUM_MISMATCH]: 'Value must be greater than ${0}.', [C.EXCLUSIVE_MAXIMUM_MISMATCH]: 'Value must be less than ${0}.',
}); const k = {}; let P; let R; let q; !(function (e) { e.CODE = 'code', e.UI = 'ui'; }(P || (P = {}))); class V {
  fieldName;

  errorMessages;

  constructor(e = '', t = []) { this.errorMessages = t, this.fieldName = e; }
}!(function (e) { e.NEXT_ITEM = 'nextItem', e.PREVIOUS_ITEM = 'previousItem'; }(R || (R = {}))), (function (e) { e.INVISIBLE = 'invisible', e.VISIBLE = 'visible'; }(q || (q = {}))); const L = (e) => new Map(Object.entries(e)); const U = L({ date: 'date-input', 'data-url': 'file-input', binary: 'file-input' }); const z = L({
  number: 'number-input', boolean: 'checkbox', object: 'panel', array: 'panel', file: 'file-input', 'file[]': 'file-input',
}); const H = ['string[]', 'boolean[]', 'number[]', 'array']; const Q = (e) => { const t = e.type || 'string'; if ('enum' in e) { return e.enum.length > 2 || H.indexOf(t) > -1 ? 'drop-down' : 'checkbox'; } return t === 'string' || t === 'string[]' ? U.get(e.format) || 'text-input' : z.get(t) || 'text-input'; }; const B = function (e) { return e?.type === 'file' || e?.type === 'file[]' || (e?.type === 'string' || e?.type === 'string[]') && (e?.format === 'binary' || e?.format === 'data-url') || e?.fieldType === 'file-input'; }; function W(e, t) { if (e === null || typeof e !== 'object') return e; let i; if (Array.isArray(e)) { i = new Array(e.length); for (let n = 0; n < e.length; n++)i[n] = W(e[n], t); } else { i = {}; for (const n of Object.keys(e))i[n] = W(e[n], t); } return t && i && i.id && (i.id = t()), i; } const G = (e) => JSON.stringify(e, null, 2); const X = (e) => e.repeatable && (void 0 === e.minOccur && void 0 === e.maxOccur || void 0 !== e.minOccur && void 0 !== e.maxOccur && e.maxOccur !== 0 || void 0 !== e.minOccur && void 0 !== e.maxOccur && e.minOccur !== 0 && e.maxOccur !== 0 || void 0 !== e.minOccur && e.minOccur >= 0 || void 0 !== e.maxOccur && e.maxOccur !== 0) || !1; class J {
  constructor(e) { this.host = e, this._definedProperties = new Set(), this._propertiesWrapper = {}, this._initialized = !1; }

  get properties() { return this._initialized || (this._setupInitialProperties(), this._initialized = !0), this._propertiesWrapper; }

  set properties(t) { const i = this.host._jsonModel.properties || {}; const n = { ...t }; this.host._jsonModel.properties = n, Object.keys(n).forEach(((e) => { this._ensurePropertyDescriptor(e); })), Object.keys({ ...i, ...n }).forEach(((t) => { if (i[t] !== n[t]) { const s = e(`properties.${t}`, n[t], i[t]); this.host.notifyDependents(s); } })); }

  ensurePropertyDescriptor(e) { this._ensurePropertyDescriptor(e); }

  _setupInitialProperties() { const e = this.host._jsonModel.properties || {}; Object.keys(e).forEach(((e) => { this._ensurePropertyDescriptor(e); })), this.host._jsonModel.properties || (this.host._jsonModel.properties = {}); }

  _ensurePropertyDescriptor(t) {
    this._definedProperties.has(t) || (Object.defineProperty(this._propertiesWrapper, t, {
      get: () => { t.startsWith('fd:') || this.host.ruleEngine.trackDependency(this.host, `properties.${t}`); return (this.host._jsonModel.properties || {})[t]; }, set: (i) => { const n = this.host._jsonModel.properties || {}; const s = n[t]; if (s !== i) { const r = { ...n, [t]: i }; this.host._jsonModel.properties = r; const a = e(`properties.${t}`, i, s); this.host.notifyDependents(a); } }, enumerable: !0, configurable: !0,
    }), this._definedProperties.add(t));
  }

  updateNestedProperty(t, i) { const n = t.split('.'); const s = n[0]; this._ensurePropertyDescriptor(s); const r = this.host._jsonModel.properties || {}; const a = JSON.parse(JSON.stringify(r)); const o = a[s] || {}; a[s] = o; let l = o; for (let e = 1; e < n.length - 1; e++)l[n[e]] ? typeof l[n[e]] !== 'object' && (l[n[e]] = {}) : l[n[e]] = {}, l = l[n[e]]; const u = n[n.length - 1]; const d = l[u]; l[u] = i, this.host._jsonModel.properties = a; const h = e(`properties.${t}`, i, d); this.host.notifyDependents(h); }

  updateSimpleProperty(e, t) { this._ensurePropertyDescriptor(e), this._propertiesWrapper[e] = t; }
} class K {
  $_name;

  $_value;

  $_type;

  $_fields = [];

  parent;

  constructor(e, t, i = typeof t, n) { this.$_name = e, this.$_value = t, this.$_type = i, this.parent = n; }

  valueOf() { return this.$_value; }

  get $name() { return this.$_name; }

  get disabled() { return !this.$_fields.find(((e) => !1 !== e.enabled)) && this.$_fields.length; }

  get $value() { const e = this.$_fields.find(((e) => { if (B(e)) return e; })); if (e && this.$_fields.every(((e) => ['string', 'string[]'].includes(e.type)))) { const t = e.form._exportDataAttachmentMap; if (t && t[e.id]) { const i = t[e.id]; return Array.isArray(i) ? i.map(((e) => e.data)) : i.data; } } return this.$_value; }

  setValue(e, t, i) { this.$_value = e, this.$_fields.forEach(((e) => { i !== e && (e.value = t); })); }

  get $type() { return this.$_type; }

  $bindToField(e) { this.$_fields.indexOf(e) === -1 && this.$_fields.push(e); }

  $convertToDataValue() { return this; }

  get $isDataGroup() { return !1; }

  $addDataNode(e, t, i = !1) { throw 'add Data Node is called on a data value'; }
} const Z = Symbol('NullValue'); const Y = new class extends K {
  constructor() { super('', Z, 'null'); }

  setValue() {}

  $bindToField() {}

  $length() { return 0; }

  $convertToDataValue() { return this; }

  $addDataNode() {}

  $removeDataNode() {}

  $getDataNode() { return this; }

  $containsDataNode() { return !1; }
}(); class ee extends K {
  $_items;

  createEntry(e, t, i) { const n = Array.isArray(t) ? 'array' : typeof t; return typeof t === 'object' && t != null ? new ee(e, t, n, i) : new K(e, t, n, i); }

  constructor(e, t, i = typeof t, n) { super(e, t, i, n), this.$_items = t instanceof Array ? t.map(((e, t) => this.createEntry(t, e, this))) : Object.fromEntries(Object.entries(t).map((([e, t]) => [e, this.createEntry(e, t, this)]))); }

  get $value() { return this.$type === 'array' ? Object.values(this.$_items).filter(((e) => void 0 !== e && !e.disabled)).map(((e) => e.$value)) : Object.fromEntries(Object.values(this.$_items).filter(((e) => void 0 !== e && !e.disabled)).map(((e) => [e.$name, e.$value]))); }

  get $length() { return Object.entries(this.$_items).length; }

  $convertToDataValue() { return new K(this.$name, this.$value, this.$type, this.parent); }

  syncDataAndFormModel(e) { this.$_fields.forEach(((t) => { e && e !== t && t.syncDataAndFormModel(this); })); }

  $addDataNode(e, t, i = !1, n = null) { if (t !== Y) { if (this.$type === 'array') { const s = e; i ? this.$_items[e] = t : this.$_items.splice(s, 0, t), this.syncDataAndFormModel(n); } else this.$_items[e] = t; t.parent = this; } }

  $removeDataNode(e, t = null) { this.$type === 'array' ? (this.$_items.splice(e, 1), this.syncDataAndFormModel(t)) : this.$_items[e] = void 0; }

  $getDataNode(e) { if (this.$_items.hasOwnProperty(e)) return this.$_items[e]; }

  $containsDataNode(e) { return this.$_items.hasOwnProperty(e) && void 0 !== this.$_items[e]; }

  get $isDataGroup() { return !0; }
} const te = 'Identifier'; const ie = 'Global'; const ne = 'Repeatable'; const se = 'bracket'; const re = (e, t) => ({ type: te, value: e, start: t }); const ae = function (e) { return e >= 'a' && e <= 'z' || e >= 'A' && e <= 'Z' || e >= '0' && e <= '9' || e === '_'; }; const oe = (e, t, i) => e === null && t[i] === '$'; const le = (e, t, i) => e === null && t[i] === '#'; const ue = (e, t) => { const i = e[t]; return i === '$' ? e.length > t && ae(e[t + 1]) : i >= 'a' && i <= 'z' || i >= 'A' && i <= 'Z' || i === '_'; }; const de = (e) => e >= '0' && e <= '9'; class he {
  stream;

  _current;

  _tokens = [];

  _result_tokens = [];

  constructor(e) { this.stream = e, this._current = 0; }

  _consumeGlobal() { return this._current += 1, { type: ie, start: 0, value: '$' }; }

  _consumeRepeatable() { return this._current += 1, { type: ne, start: 0, value: '#' }; }

  _consumeUnquotedIdentifier(e) { const t = this._current; for (this._current += 1; this._current < e.length && ae(e[this._current]);) this._current += 1; return re(e.slice(t, this._current), t); }

  _consumeQuotedIdentifier(e) { const t = this._current; this._current += 1; const i = e.length; for (;e[this._current] !== '"' && this._current < i;) { let t = this._current; e[t] !== '\\' || e[t + 1] !== '\\' && e[t + 1] !== '"' ? t += 1 : t += 2, this._current = t; } return this._current += 1, re(JSON.parse(e.slice(t, this._current)), t); }

  _consumeNumber(e) { const t = this._current; this._current += 1; const i = e.length; for (;de(e[this._current]) && this._current < i;) this._current += 1; const n = e.slice(t, this._current); return { type: 'Number', value: parseInt(n, 10), start: t }; }

  _consumeBracket(e) { const t = this._current; let i; if (this._current += 1, !de(e[this._current])) throw new Error(`unexpected exception at position ${this._current}. Must be a character`); if (i = this._consumeNumber(e).value, this._current < this.stream.length && e[this._current] !== ']') throw new Error(`unexpected exception at position ${this._current}. Must be a character`); return this._current++, ((e, t) => ({ type: se, value: e, start: t }))(i, t); }

  tokenize() { const e = this.stream; for (;this._current < e.length;) { const t = this._tokens.length ? this._tokens.slice(-1)[0] : null; if (oe(t, e, this._current)) { const e = this._consumeGlobal(); this._tokens.push(e), this._result_tokens.push(e); } else if (le(t, e, this._current)) { const e = this._consumeRepeatable(); this._tokens.push(e), this._result_tokens.push(e); } else if (ue(e, this._current)) { const t = this._consumeUnquotedIdentifier(e); this._tokens.push(t), this._result_tokens.push(t); } else if (e[this._current] === '.' && t != null && t.type !== 'DOT') this._tokens.push({ type: 'DOT', value: '.', start: this._current }), this._current += 1; else if (e[this._current] === '[') { const t = this._consumeBracket(e); this._tokens.push(t), this._result_tokens.push(t); } else { if (e[this._current] !== '"') { const e = Math.max(0, this._current - 2); const t = Math.min(this.stream.length, this._current + 2); throw new Error(`Exception at parsing stream ${this.stream.slice(e, t)}`); } { const t = this._consumeQuotedIdentifier(e); this._tokens.push(t), this._result_tokens.push(t); } } } return this._result_tokens; }
} const ce = (e) => new he(e).tokenize(); const pe = (e, t, i) => { let n; n = typeof t === 'string' ? ce(t) : t; let s = e; let r = 0; const a = (e, t, i) => (t === null ? i : t.type === se ? new ee(e.value, [], 'array') : new ee(e.value, {})); for (;r < n.length && s != null;) { const t = n[r]; if (t.type === ie)s = e; else if (t.type === te) { if (!(s instanceof ee && s.$type === 'object')) throw new Error(`Looking for ${t.value} in ${s.$value}`); if (s.$containsDataNode(t.value) && s.$getDataNode(t.value).$value !== null)s = s.$getDataNode(t.value); else if (i) { const e = a(t, r < n.length - 1 ? n[r + 1] : null, i); s.$addDataNode(t.value, e), s = e; } else s = void 0; } else if (t.type === se) { if (!(s instanceof ee && s.$type === 'array')) throw new Error(`Looking for index ${t.value} in non array${s.$value}`); { const e = t.value; if (e < s.$length)s = s.$getDataNode(e); else if (i) { const o = a(t, r < n.length - 1 ? n[r + 1] : null, i); s.$addDataNode(e, o), s = o; } else s = void 0; } }r += 1; } return s; }; class me {
  data;

  mediaType = 'application/octet-stream';

  name = 'unknown';

  size = 0;

  constructor(e) { Object.assign(this, e); }

  get type() { return this.mediaType; }

  set type(e) { this.mediaType = e; }

  toJSON() {
    return {
      name: this.name, size: this.size, mediaType: this.mediaType, data: this.data.toString(),
    };
  }

  equals(e) { return this.data === e.data && this.mediaType === e.mediaType && this.name === e.name && this.size === e.size; }
} const fe = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'.split(''); const ge = /^(\d*\.?\d+)(\\?(?=[KMGT])([KMGT])(?:i?B)?|B?)$/i; const _e = (e) => { const t = []; for (let i = 0; i <= e; i++) { let e; e = i === 0 ? Math.floor(Math.random() * (fe.length - 11)) : Math.floor(Math.random() * fe.length), t.push(fe[e]); } return t.join(''); }; const ye = (e, t, i) => { if (t && e.dataRef === null) return i ? Promise.resolve(null) : null; let n = null; if (e.isContainer) return i ? ve(e, t).then(((e) => e)) : Me(e, t); if (B(e.getState())) { n = {}; const t = e.name || ''; const s = e.dataRef != null ? e.dataRef : t.length > 0 ? e.name : void 0; if (e.value instanceof Array) if (e.type === 'string[]' && e?.format === 'data-url') { if (i) return e.serialize().then(((t) => (n[e.id] = t.map(((e) => ({ ...e, dataRef: s }))), n))); n[e.id] = e.value.map(((e) => ({ ...e, dataRef: s }))); } else n[e.id] = e.value.map(((e) => ({ ...e, dataRef: s }))); else if (e.value != null) if (e.type === 'string' && e?.format === 'data-url') { if (i) return e.serialize().then(((t) => (n[e.id] = { ...t[0], dataRef: s }, n))); n[e.id] = { ...e.value, dataRef: s }; } else n[e.id] = { ...e.value, dataRef: s }; } return i ? Promise.resolve(n) : n; }; const ve = async (e, t = !1) => (e.items || []).reduce((async (e, i) => { const n = await e; const s = await ye(i, t, !0); return Object.assign(n, s); }), Promise.resolve({})); const Me = (e, t = !1) => (e.items || []).reduce(((e, i) => { const n = ye(i, t, !1); return Object.assign(e, n); }), {}); const be = (e) => { let t = 0; if (typeof e === 'string') { const i = ge.exec(e.trim()); i != null && (t = je(parseFloat(i[1]), (i[2] || 'kb').toUpperCase())); } return t; }; const je = (e, t) => {
  const i = 1024 ** {
    KB: 1, MB: 2, GB: 3, TB: 4,
  }[t]; return Math.round(e * i);
}; const Ee = (e) => /^data:([a-z]+\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/.exec(e.trim()) != null; const xe = (e) => { const t = /^data:([a-z]+\/[a-z0-9-+.]+)?(?:;name=([^;]+))?(;base64)?,(.+)$/.exec(e); if (t !== null) { const e = t[1] || ''; const i = t[2] || 'unknown'; if (typeof t[3] === 'string') { const n = atob(t[4]); const s = []; for (let e = 0; e < n.length; e++)s.push(n.charCodeAt(e)); return { name: i, blob: new window.Blob([new Uint8Array(s)], { type: e }) }; } return { name: i, blob: new window.Blob([t[4]], { type: e }) }; } return null; }; const we = (e) => { if (!e || !Object.keys(e).length) return e; if ((':items' in (t = e) || 'cqItems' in t) && (':itemsOrder' in t || 'cqItemsOrder' in t)) { const t = []; const i = e[':itemsOrder'] || e.cqItemsOrder; const n = e[':items'] || e.cqItems; i.forEach(((e) => { t.push(we(n[e])); })), e.items = t; } let t; return e; }; const Te = /^(\d{4})-(\d{1,2})-(\d{1,2})$/; const Ie = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/; const De = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; const $e = (e) => { if (e === '' || e == null) return { value: '', valid: !0 }; let t = parseFloat(e); const i = !isNaN(t); return i || (t = e), { value: t, valid: i }; }; const Ne = (e) => { if (e === '' || e == null) return { value: '', valid: !0 }; let t = parseFloat(e); const i = !isNaN(t) && Math.round(t) === t; return i || (t = e), { value: t, valid: i }; }; const Se = (e) => (e == null || e instanceof Array ? e : [e]); const Oe = (e) => { const t = typeof e === 'boolean' || e === 'true' || e === 'false'; return { valid: t, value: typeof e === 'boolean' ? e : t ? e === 'true' : e }; }; const Ce = (e) => {
  const t = ((e) => {
    if (e !== null) {
      let t = null; if (e instanceof me)t = e; else if (typeof File !== 'undefined' && e instanceof File) {
        t = {
          name: e.name, mediaType: e.type, size: e.size, data: e,
        };
      } else if (typeof e === 'string' && Ee(e)) {
        const i = xe(e); if (i !== null) {
          const { blob: e, name: n } = i; t = {
            name: n, mediaType: e.type, size: e.size, data: e,
          };
        }
      } else {
        let i = e; try { i = JSON.parse(e), t = i, t.mediaType || (t.mediaType = t.type); } catch (e) {} if (typeof i?.data === 'string' && Ee(i?.data)) {
          const e = xe(i?.data); if (e !== null) {
            const n = e.blob; t = {
              name: i?.name, mediaType: i?.type || i?.mediaType, size: n.size, data: n,
            };
          }
        } else {
          typeof i === 'string' ? t = {
            name: i.split('/').pop(), mediaType: 'application/octet-stream', size: 0, data: i,
          } : typeof i === 'object' && (t = {
            name: i?.name, mediaType: i?.type || i?.mediaType, size: i?.size, data: i?.data,
          });
        }
      } return t !== null && t.data != null ? new me(t) : null;
    } return null;
  })(e); const i = t !== null; return { value: i ? t : e, valid: i };
}; const Ae = (e, t) => { const i = Se(e); return i == null ? [[], [i]] : i.reduce(((e, i) => { if (e[1].length == 0) { const n = t(i); e[n.valid ? 0 : 1].push(n.value); } return e; }), [[], []]); }; const Fe = {
  date: ['minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum', 'format'], string: ['minLength', 'maxLength', 'pattern'], number: ['minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum'], array: ['minItems', 'maxItems', 'uniqueItems'], file: ['accept', 'maxFileSize'], email: ['minLength', 'maxLength', 'format', 'pattern'], datetime: ['minimum', 'maximum'],
}; const ke = ['type', 'format', 'minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum', 'minItems', 'maxItems', 'uniqueItems', 'minLength', 'maxLength', 'pattern', 'required', 'enum', 'accept', 'maxFileSize']; const Pe = {
  type: (e, t) => { let i = t; if (t == null) return { valid: !0, value: t }; let n; let s = !0; switch (e) { case 'string': s = !0, i = t.toString(); break; case 'string[]': i = Se(t); break; case 'number': n = $e(t), i = n.value, s = n.valid; break; case 'boolean': n = Oe(t), s = n.valid, i = n.value; break; case 'integer': n = Ne(t), s = n.valid, i = n.value; break; case 'integer[]': n = Ae(t, Ne), s = n[1].length === 0, i = s ? n[0] : t; break; case 'file': n = Ce(t instanceof Array ? t[0] : t), s = n.valid, i = n.value; break; case 'file[]': n = Ae(t, Ce), s = n[1].length === 0, i = s ? n[0] : t; break; case 'number[]': n = Ae(t, $e), s = n[1].length === 0, i = s ? n[0] : t; break; case 'boolean[]': n = Ae(t, Oe), s = n[1].length === 0, i = s ? n[0] : t; } return { valid: s, value: i }; }, format: (e, t) => { let i = !0; const n = t; if (t === null) return { value: n, valid: i }; let s; switch (e) { case 'date': if (s = Te.exec((t || '').trim()), s != null) { const [e, t, n, r] = s; const [a, o] = [+n, +r]; const l = ((e) => e % 400 == 0 || e % 4 == 0 && e % 100 != 0)(+t); i = a >= 1 && a <= 12 && o >= 1 && o <= ((e, t) => (e && t == 2 ? 29 : De[t - 1]))(l, a); } else i = !1; break; case 'email': i = new RegExp(Ie).test((t || '').trim()); break; case 'data-url': i = !0; } return { valid: i, value: n }; }, minimum: (e, t) => ({ valid: t >= e, value: t }), maximum: (e, t) => ({ valid: t <= e, value: t }), exclusiveMinimum: (e, t) => ({ valid: t > e, value: t }), exclusiveMaximum: (e, t) => ({ valid: t < e, value: t }), minItems: (e, t) => ({ valid: t instanceof Array && t.length >= e, value: t }), maxItems: (e, t) => ({ valid: t instanceof Array && t.length <= e, value: t }), uniqueItems: (e, t) => ({ valid: !e || t instanceof Array && t.length === new Set(t).size, value: t }), minLength: (e, t) => ({ ...Pe.minimum(e, typeof t === 'string' ? t.length : 0), value: t }), maxLength: (e, t) => ({ ...Pe.maximum(e, typeof t === 'string' ? t.length : 0), value: t }), pattern: (e, t) => { let i; return i = typeof e === 'string' ? new RegExp(e) : e, { valid: i.test(t), value: t }; }, required: (e, t) => ({ valid: !e || t != null && t !== '', value: t }), enum: (e, t) => ({ valid: e.indexOf(t) > -1, value: t }), accept: (e, t) => { if (!e || e.length === 0 || t == null) return { valid: !0, value: t }; return { valid: !(t instanceof Array ? t : [t]).some(((t) => { return i = t.type, n = e, !(i !== '' && (!i || n.some(((e) => { const t = e.trim(); const n = t.split('/')[0]; const s = t.split('.')[1]; return t.includes('*') && i.startsWith(n) || t.includes('.') && i.endsWith(s) || t === i; })))); let i; let n; })), value: t }; }, maxFileSize: (e, t) => { const i = typeof e === 'string' ? be(e) : e; return { valid: !(t instanceof me) || t.size <= i, value: t }; },
}; const Re = ['value', 'label', 'description', 'visible', 'enabled', 'valid', 'errorMessage', 'readOnly', 'enum', 'enumNames', 'required', 'properties', 'exclusiveMinimum', 'exclusiveMaximum', 'maximum', 'maxItems', 'minimum', 'minItems', 'checked']; const qe = [...Re, 'index', 'activeChild']; const Ve = ['plain-text', 'image']; class Le {
  _action;

  _target;

  _currentTarget;

  constructor(e, t) { this._action = e, e.target ? (this._currentTarget = t, this._target = e.target) : (this._target = t, this._currentTarget = t); }

  get type() { return this._action.type; }

  get payload() { return this._action.payload; }

  get metadata() { return this._action.metadata; }

  get target() { return this._target; }

  get currentTarget() { return this._currentTarget; }

  get isCustomEvent() { return this._action.isCustomEvent; }

  get originalAction() { return this._action.originalAction; }

  toString() { return this._action.toString(); }
} const Ue = Symbol('target'); const ze = Symbol('qualifiedName'); const He = (e) => (...t) => (i, n, s) => { const r = s.get; r != null && (s.get = function () { if (t.indexOf(this.fieldType) > -1 === e) return r.call(this); }); const a = s.set; a != null && (s.set = function (i) { t.indexOf(this.fieldType) > -1 === e && a.call(this, i); }); }; const Qe = He(!0); const Be = He(!1); class We {
  _options;

  _ruleNode;

  _lang = '';

  _callbacks = {};

  _dependents = [];

  _jsonModel;

  _tokens = [];

  _eventSource = P.CODE;

  _fragment = '$form';

  _idSet;

  _propertiesManager;

  createIdSet() { return new Set(); }

  get isContainer() { return !1; }

  constructor(e, t) { this._options = t, this._idSet = this.createIdSet(), this[ze] = null, this._jsonModel = { ...e, id: this.form.getUniqueId(e?.id) }, this.parent?.isFragment ? this._fragment = this.parent.qualifiedName : this.parent?.fragment && (this._fragment = this.parent.fragment), this._propertiesManager = new J(this); }

  get fragment() { return this._fragment; }

  setupRuleNode() { const e = this; this._ruleNode = new Proxy(this.ruleNodeReference(), { get: (t, i) => e.getFromRule(t, i) }); }

  ruleNodeReference() { return this; }

  getRuleNode() { return this._ruleNode; }

  getFromRule(e, t) { if (t === Symbol.toPrimitive || t === 'valueOf' && !e.hasOwnProperty('valueOf')) return this.valueOf; if (t === Ue) return this; if (typeof t === 'string') if (t.startsWith('$')) { if (typeof this[t = t.substr(1)] !== 'function') { const e = this[t]; return e instanceof We ? e.getRuleNode() : e instanceof Array ? e.map(((e) => (e instanceof We ? e.getRuleNode() : e))) : e; } } else { if (e.hasOwnProperty(t)) return e[t]; if (typeof e[t] === 'function') return e[t]; } }

  get id() { return this._jsonModel.id; }

  get index() { return this.parent ? this.parent.indexOf(this) : 0; }

  get parent() { return this._options.parent; }

  get type() { return this._jsonModel.type; }

  get repeatable() { return this.parent?.hasDynamicItems(); }

  get fieldType() { return this._jsonModel.fieldType || 'text-input'; }

  get ':type'() { return this._jsonModel[':type'] || this.fieldType; }

  get name() { return this._jsonModel.name; }

  get screenReaderText() { return this._jsonModel.screenReaderText; }

  get description() { return this._jsonModel.description; }

  set description(e) { this._setProperty('description', e); }

  get dataRef() { return this._jsonModel.dataRef; }

  get visible() { return void 0 !== this.parent?.visible ? !!this.parent?.visible && this._jsonModel.visible : this._jsonModel.visible; }

  set visible(t) { if (t !== this._jsonModel.visible) { const i = e('visible', t, this._jsonModel.visible); this._jsonModel.visible = t, this.notifyDependents(i); } }

  get form() { return this._options.form; }

  get ruleEngine() { return this.form.ruleEngine; }

  get label() { return this._jsonModel.label; }

  set label(t) { if (!(t !== null && this._jsonModel.label !== null && typeof t === 'object' && typeof this._jsonModel.label === 'object' ? JSON.stringify(t) === JSON.stringify(this._jsonModel.label) : t === this._jsonModel.label)) { const i = e('label', t, this._jsonModel.label); this._jsonModel = { ...this._jsonModel, label: t }, this.notifyDependents(i); } }

  get uniqueItems() { return this._jsonModel.uniqueItems; }

  isTransparent() { const e = this.parent?._jsonModel?.type === 'array'; return !this._jsonModel.name && !e; }

  getDependents() { return this._dependents.map(((e) => ({ id: e.node.id, propertyName: e.propertyName }))); }

  getState(e = !1) {
    return this.withDependencyTrackingControl(!0, (() => ({
      ...this._jsonModel,
      properties: this.properties,
      index: this.index,
      parent: void 0,
      qualifiedName: this.qualifiedName,
      ...!0 === this.repeatable ? { repeatable: !0, minOccur: this.parent.minItems, maxOccur: this.parent.maxItems } : {},
      ':type': this[':type'],
      ...e ? {
        _dependents: this._dependents.length ? this.getDependents() : void 0, allowedComponents: void 0, columnClassNames: void 0, columnCount: void 0, gridClassNames: void 0,
      } : {},
    })));
  }

  subscribe(e, t = 'change') { return this._callbacks[t] = this._callbacks[t] || [], this._callbacks[t].push(e), { unsubscribe: () => { this._callbacks[t] = this._callbacks[t].filter(((t) => t !== e)); } }; }

  _addDependent(e, i) { if (void 0 === this._dependents.find((({ node: t, propertyName: n }) => { let s = t === e; return s && i && i.startsWith('properties.') && (s = n === i), s; }))) { const n = this.subscribe(((n) => { const s = n.payload.changes; const r = [...qe, 'items']; s.findIndex(((e) => { const t = e.propertyName; return r.includes(t) || t.startsWith('properties.') && i === t; })) > -1 && (this.form.changeEventBehaviour === 'deps' ? e.dispatch(n) : e.dispatch(new t())); })); this._dependents.push({ node: e, propertyName: i, subscription: n }); } }

  removeDependent(e) { const t = this._dependents.findIndex((({ node: t }) => t === e)); t > -1 && (this._dependents[t].subscription.unsubscribe(), this._dependents.splice(t, 1)); }

  queueEvent(e) { const t = new Le(e, this); this.form.getEventQueue().queue(this, t, ['valid', 'invalid'].indexOf(t.type) > -1); }

  dispatch(e) { this.queueEvent(e), this.form.getEventQueue().runPendingQueue(); }

  withDependencyTrackingControl(e, t) { const i = this.form.ruleEngine.getDependencyTracking(); e && this.form.ruleEngine.setDependencyTracking(!1); try { return t(); } finally { e && this.form.ruleEngine.setDependencyTracking(i); } }

  notifyDependents(e) { const t = this._jsonModel._dependents; t && (t.forEach(((e) => { const t = this.form.getElement(e.id); t && this._addDependent(t, e.propertyName); })), this._jsonModel._dependents = void 0); (this._callbacks[e.type] || []).forEach(((t) => { this.withDependencyTrackingControl(!0, (() => { t(new Le(e, this)); })); })); }

  isEmpty(e = this._jsonModel.value) { return e == null || e === ''; }

  _setProperty(t, i, n = !0, s = (e) => {}) { const r = this._jsonModel[t]; let a = !1; if (a = i !== null && r !== null && typeof i === 'object' && typeof r === 'object' ? JSON.stringify(i) === JSON.stringify(r) : r === i, !a) { this._jsonModel[t] = i; const a = e(t, i, r); return n && this.notifyDependents(a), s.call(this, a), ke.includes(t) && (void 0 === this.hasValueBeenSet || this.hasValueBeenSet) && this.validate(), a.payload.changes; } return []; }

  bindToDataModel(e) { if (this.fieldType === 'form' || this.id === '$form') return void (this._data = e); const t = this._jsonModel.dataRef; let i; let n = e; let s = ''; if (t === null)i = Y; else if (void 0 === t || this.repeatable) { if (e !== Y && Ve.indexOf(this.fieldType) === -1) { n = e; const t = this._jsonModel.name || ''; const r = e.$type === 'array' ? this.index : t; if (s = r, r !== '') { const n = this.defaultDataModel(r); void 0 !== n && (typeof e.$getDataNode === 'function' ? (i = e.$getDataNode(r), void 0 === i && (i = n, e.$addDataNode(r, i))) : (console.error(`$getDataNode method is undefined for "${t}" with dataModel type "${e.$type}"`), i = void 0)); } else i = void 0; } } else try { this._tokens.length === 0 && (this._tokens = ce(t)); let r = e; if (this._tokens[0].type === ie)r = this.form.getDataNode(); else if (this._tokens[0].type === ne) { let e = this.parent; for (;!e.repeatable && e !== this.form;)e = e.parent; r = e.getDataNode(); } if (void 0 !== r) { const e = this._tokens[this._tokens.length - 1].value; const t = this.defaultDataModel(e); i = pe(r, this._tokens, t), n = pe(r, this._tokens.slice(0, -1)), s = e; } } catch (e) { console.error(`Error parsing dataRef "${t}" for field "${this.id}". The data of this field will not be exported.`); } return i && (this.isContainer || n === Y || i === Y || (i = i?.$convertToDataValue(), n.$addDataNode(s, i, !0)), i?.$bindToField(this), this._data = i), this._data; }

  _data;

  getDataNode() { return this._data; }

  get lang() { return this._jsonModel.lang && (this._lang = this._jsonModel.lang), this._lang || (this.parent ? this._lang = this.parent.lang : this._lang = Intl.DateTimeFormat().resolvedOptions().locale), this._lang; }

  get properties() { return this._propertiesManager.properties; }

  set properties(e) { this._propertiesManager.properties = e; }

  getPropertiesManager() { return this._propertiesManager; }

  getNonTransparentParent() { let e = this.parent; for (;e != null && e.isTransparent();)e = e.parent; return e; }

  _isAncestorRepeatable() { let e = this.parent; for (;e && !e.repeatable;)e = e.parent; return Boolean(e); }

  _initialize(e) { if (void 0 === this._data) { let e; let t = this.parent; do { e = t.getDataNode(), t = t.parent; } while (void 0 === e); this.bindToDataModel(e); } }

  _applyUpdates(e, t) { return e.reduce(((e, i) => { const n = t[i]; const s = this._setProperty(i, n, !1); return s.length > 0 && (e[i] = s[0]), e; }), {}); }

  get qualifiedName() { if (this.isTransparent()) return null; if (this[ze] !== null) return this[ze]; const e = this.getNonTransparentParent(); let t; return t = e && e.type === 'array' ? `${e.qualifiedName}[${this.index}]` : `${e.qualifiedName}.${this.name}`, this._isAncestorRepeatable() || (this[ze] = t), t; }

  focus() { this.parent && (this.parent.activeChild = this); }

  _getDefaults() { return {}; }

  _applyDefaultsInModel() { Object.entries(this._getDefaults()).map((([e, t]) => { void 0 === this._jsonModel[e] && void 0 !== t ? this._jsonModel[e] = t : typeof t !== 'object' || t === null || Array.isArray(t) || Object.keys(t).forEach(((i) => { void 0 === this._jsonModel[e][i] && (this._jsonModel[e][i] = t[i]); })); })); }
}O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], We.prototype, 'index', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], We.prototype, 'description', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], We.prototype, 'visible', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], We.prototype, 'label', null); class Ge extends We {
  _events = {};

  _rules = {};

  getRules() { return typeof this._jsonModel.rules !== 'object' ? {} : this._jsonModel.rules; }

  getCompiledRule(e, t) { if (!(e in this._rules)) { const i = t || this.getRules()[e]; if (!(typeof i === 'string' && i.length > 0)) throw new Error(`only expression strings are supported. ${typeof i} types are not supported`); try { let t = i; this.fragment !== '$form' && (t = i.replaceAll('$form', this.fragment)), this._rules[e] = this.ruleEngine.compileRule(t, this.lang); } catch (t) { this.form.logger.error(`Unable to compile rule \`"${e}" : "${i}"\` Exception : ${t}`); } } return this._rules[e]; }

  getCompiledEvent(e) { if (!(e in this._events)) { let t = this._jsonModel.events?.[e]; typeof t === 'string' && t.length > 0 && (t = [t]), void 0 !== t && t.length > 0 && (this._events[e] = t.map(((i) => { try { let e = i; return this.fragment !== '$form' && (e = i.replaceAll('$form', this.fragment)), this.ruleEngine.compileRule(e, this.lang); } catch (i) { this.form.logger.error(`Unable to compile expression \`"${e}" : "${t}"\` Exception : ${i}`); } return null; })).filter(((e) => e !== null))); } return this._events[e] || []; }

  applyUpdates(e) { typeof e === 'object' ? e !== null && Object.entries(e).forEach((([e, t]) => { if (e in Re || e in this && typeof this[e] !== 'function') try { this[e] = t; } catch (e) { console.error(e); } })) : void 0 !== e && (this.value = e); }

  executeAllRules(e) { const t = Object.entries(this.getRules()); if (t.length > 0) { const i = this.getExpressionScope(); t.forEach((([t, n]) => { const s = this.getCompiledRule(t, n); if (s) { const r = this.ruleEngine.execute(s, i, e, !0, n); if (Re.indexOf(t) > -1) { this.isEmpty() && this.isEmpty(r) && t === 'value' || (this[t] = r); } else this.form.logger.warn(`${t} is not a valid editable property.`); } })); } }

  getExpressionScope() { const e = this.getNonTransparentParent(); const t = { self: this.getRuleNode(), siblings: e?.ruleNodeReference() || {} }; const i = new Proxy(t, { get: (e, t) => { if (t === Symbol.toStringTag) return 'Object'; if (typeof t === 'string' && t.startsWith('$')) { const i = e.self[t]; return i instanceof We ? i.getRuleNode() : i instanceof Array ? i.map(((e) => (e instanceof We ? e.getRuleNode() : e))) : i; } return t in e.siblings ? e.siblings[t] : e.self[t]; }, has: (e, t) => { const i = e.self[t]; const n = e.siblings[t]; return void 0 !== i || void 0 !== n; } }); return i; }

  executeEvent(e, t, i) { let n; t && (n = this.ruleEngine.execute(t, this.getExpressionScope(), e, !1, i), n instanceof Promise && this.form.addPromises(n)), void 0 !== n && n != null && this.applyUpdates(n); }

  executeRule(e, t) { void 0 === e.payload.ruleName && this.executeAllRules(t); }

  executeExpression(e) {
    const t = {
      form: this.form, $form: this.form.getRuleNode(), $field: this.getRuleNode(), field: this,
    }; const i = this.ruleEngine.compileRule(e, this.lang); return this.ruleEngine.execute(i, this.getExpressionScope(), t, !1, e);
  }

  change(e, t) { this.form.changeEventBehaviour === 'deps' && this.executeAllRules(t); }

  executeAction(e) {
    const t = {
      form: this.form, $form: this.form.getRuleNode(), $field: this.getRuleNode(), field: this, $event: { type: e.type, payload: e.payload, target: this.getRuleNode() },
    }; this.ruleEngine.setDependencyTracking(['change', 'executeRule'].includes(e.type)); const i = e.isCustomEvent ? `custom:${e.type}` : e.type; const n = e.isCustomEvent ? `custom_${e.type}` : e.type; const s = this.getCompiledEvent(i); const r = this._jsonModel.events?.[i]; n in this && typeof this[n] === 'function' && this[n](e, t), s.forEach(((e, i) => { let n = ''; Array.isArray(r) ? n = r[i] : typeof r === 'string' && (n = r), this.executeEvent(t, e, n); })), e.target === this && this.notifyDependents(e);
  }
} const Xe = ['readOnly', 'enabled']; class Je extends Ge {
  _children = [];

  _childrenReference;

  _itemTemplate = null;

  fieldFactory;

  _isFragment = !1;

  _insideFragment = !1;

  constructor(e, t) { super(e, { form: t.form, parent: t.parent, mode: t.mode }), this._isFragment = !0 === this._jsonModel?.properties?.['fd:fragment'], this.fieldFactory = t.fieldFactory; }

  _getDefaults() { return { ...super._getDefaults(), enabled: !0, readOnly: !1 }; }

  ruleNodeReference() { return this._childrenReference; }

  get items() { return this._children; }

  get maxItems() { return this._jsonModel.maxItems; }

  set maxItems(t) { this._jsonModel.maxItems = t; const i = this._jsonModel.minItems || 1; const n = this._children.length; const s = Math.min(n - t, n - i); if (s > 0) { for (let e = 0; e < s; e++) this.getDataNode().$removeDataNode(t + e), this._childrenReference.pop(); const i = this._children.splice(t, s); this.notifyDependents(e('items', i, null)); } }

  get minItems() { return this._jsonModel.minItems; }

  set minItems(t) { this._jsonModel.minItems = t; const i = this._children.length - t; const n = Math.abs(i); if (i < 0) { const t = []; for (let e = 0; e < n; e++)t.push(this._addChild(this._itemTemplate, null, !0)); this.notifyDependents(e('items', t, null)); } }

  hasDynamicItems() { return this._itemTemplate != null; }

  get isContainer() { return !0; }

  _activeChild = null;

  isSiteContainer(e) { return (':items' in e || 'cqItems' in e) && !('fieldType' in e); }

  isAFormField(e) { return 'fieldType' in e || 'id' in e || 'name' in e || 'dataRef' in e || 'type' in e; }

  _getFormAndSitesState(e = !1, t = !1) { return this._jsonModel.items ? this._jsonModel.items.map(((i) => { if (this.isSiteContainer(i)) { const e = { ...i?.id ? { id: this.form.getUniqueId() } : {} }; return { ...i, ...e, ':items': this.walkSiteContainerItems(i) }; } return this.isAFormField(i) ? { ...this.form.getElement(i?.id).getState(e, t) } : i; })) : []; }

  getItemsState(e = !1, t = !1) { return this._jsonModel.type === 'array' || X(this._jsonModel) ? this._children.map(((e) => ({ ...e.getState(!0, t) }))) : this._getFormAndSitesState(e, t); }

  getState(e = !1, t = !1) {
    return this.withDependencyTrackingControl(!0, (() => ({
      ...super.getState(t), ...t ? { ':items': void 0, ':itemsOrder': void 0 } : {}, items: this.getItemsState(e, t), ...(this._jsonModel.type === 'array' || X(this._jsonModel)) && this._itemTemplate ? { _itemTemplate: { ...this._itemTemplate } } : {}, enabled: this.enabled, readOnly: this.readOnly,
    })));
  }

  _createChild(e, t) { return this.fieldFactory.createField(e, t); }

  walkSiteContainerItems(e) { return Object.fromEntries(Object.entries(e[':items']).map((([e, t]) => { if (this.isAFormField(t)) return [e, this.form.getElement(t?.id).getState()]; if (this.isSiteContainer(t)) return this.walkSiteContainerItems(t); if (typeof t === 'object') { const i = { ...t?.id ? { id: this.form.getUniqueId() } : {} }; return [e, { ...t, ...i }]; } return [e, t]; }))); }

  _addChildToRuleNode(e, t) { const i = this; const { parent: n = this } = t; const s = n.type == 'array' ? `${n._children.length}` : e.name || ''; s.length > 0 && Object.defineProperty(n._childrenReference, s, { get: () => (e.isContainer && e.hasDynamicItems() && i.ruleEngine.trackDependency(e, 'items'), i.hasDynamicItems() ? (i.ruleEngine.trackDependency(i, 'items'), void 0 !== this._children[s] ? this._children[s].getRuleNode() : void 0) : e.getRuleNode()), configurable: !0, enumerable: !0 }); }

  _addChild(e, t, i = !1, n = 'create') { let s = this; for (;s != null && s.isTransparent();)s = s.parent; (typeof t !== 'number' || t > s._children.length) && (t = this._children.length); const r = this.form; const a = { index: t, ...W(e, i ? () => r.getUniqueId() : void 0) }; const o = this._createChild(a, { parent: this, form: this.form, mode: n }); return e.id = o.id, this.form.fieldAdded(o), this._addChildToRuleNode(o, { parent: s }), t === this._children.length ? this._children.push(o) : this._children.splice(t, 0, o), o; }

  indexOf(e) { return this._children.indexOf(e); }

  defaultDataModel(e) { const t = this._jsonModel.type || void 0; if (void 0 !== t) { return new ee(e, t === 'array' ? [] : {}, t); } }

  _canHaveRepeatingChildren(e = 'create') { const t = this._jsonModel.items; return this._jsonModel.type == 'array' && this.getDataNode() != null && (t.length === 1 || t.length > 0 && t[0].repeatable == 1 && e === 'restore'); }

  get isFragment() { return this._isFragment || this._jsonModel?.properties?.['fd:fragment']; }

  _initialize(e) { super._initialize(e); const t = this._jsonModel.items || []; if (this._childrenReference = this._jsonModel.type == 'array' ? [] : {}, this._canHaveRepeatingChildren(e)) { this._itemTemplate = this._jsonModel._itemTemplate || W(t[0]), this._jsonModel._itemTemplate = void 0, e === 'restore' && (this._itemTemplate.repeatable = void 0), typeof this._jsonModel.minItems !== 'number' && (this._jsonModel.minItems = 0), typeof this._jsonModel.maxItems !== 'number' && (this._jsonModel.maxItems = -1), typeof this._jsonModel.initialItems !== 'number' && (this._jsonModel.initialItems = Math.max(1, this._jsonModel.minItems)); const i = e === 'restore' ? this._jsonModel.items.length : this._jsonModel.initialItems; for (let n = 0; n < i; n++) { let i; if (e === 'restore') { let s = this._itemTemplate; n < this._jsonModel.items.length && (s = W(t[n]), s.repeatable = void 0), i = this._addChild(s, void 0, n > this._jsonModel.items.length - 1, e); } else i = this._addChild(this._itemTemplate, void 0, n > this._jsonModel.items.length - 1); e === 'create' && (t[0].id = i.id), i._initialize(e); } } else t.length > 0 ? (t.forEach(((t) => { if (this.isSiteContainer(t)) this._initializeSiteContainer(t); else if (this.isAFormField(t)) { this._addChild(t, void 0, !1, e)._initialize(e); } else this.form.logger.warn(`A container item was not initialized. ${t}`); })), this._jsonModel.minItems = this._children.length, this._jsonModel.maxItems = this._children.length, this._jsonModel.initialItems = this._children.length) : this.form.logger.warn('A container exists with no items.'); this.setupRuleNode(); }

  _initializeSiteContainer(e) { Object.entries(e[':items']).forEach((([e, t]) => { if (this.isAFormField(t)) { this._addChild(t)._initialize(); } else if (this.isSiteContainer(t)) return this._initializeSiteContainer(t); })); }

  addItem(n) { if ((n.type === 'addItem' || n.type == 'addInstance') && this._itemTemplate != null && (this._jsonModel.maxItems === -1 || this._children.length < this._jsonModel.maxItems)) { const s = this.getDataNode(); let r = n.payload; const a = this._addChild(this._itemTemplate, n.payload, !0); (typeof r !== 'number' || r > this._children.length) && (r = this._children.length); const o = a.defaultDataModel(r); o && s.$addDataNode(r, o, !1, this), a._initialize('create'), this.notifyDependents(e('items', a.getState(), null)), a.dispatch(new i()), a.dispatch(new t()); for (let e = r + 1; e < this._children.length; e++) this._children[e].dispatch(new t()); } }

  removeItem(i) { if ((i.type === 'removeItem' || i.type == 'removeInstance') && this._itemTemplate != null) { if (this._children.length == 0) return; let n = i.payload; typeof n !== 'number' && (n = this._children.length - 1); const s = this._children[n].getState(); if (this._children.length > this._jsonModel.minItems) { this._childrenReference.pop(), this._children.splice(n, 1), this.getDataNode().$removeDataNode(n, this); for (let e = n; e < this._children.length; e++) this._children[e].dispatch(new t()); this.notifyDependents(e('items', null, s)); } } }

  queueEvent(e) { super.queueEvent(e), e.metadata?.dispatch && this.items.forEach(((t) => { t.queueEvent(e); })); }

  reset() { if ((this.type === 'array' || X(this._jsonModel)) && this.items.length > this._jsonModel.initialItems) { const e = this.items.length - this._jsonModel.initialItems; for (let t = 0; t < e; t++) this.dispatch(new n()); } this.items.forEach(((e) => { e.reset(); })); }

  validate() { return this.items.flatMap(((e) => e.validate())).filter(((e) => e.fieldName !== '')); }

  dispatch(e) { super.dispatch(e); }

  importData(n) { if (void 0 !== this._data && this.type === 'array' && Array.isArray(n)) { const s = new ee(this._data.$name, n, this._data.$type, this._data.parent); try { this._data.parent?.$addDataNode(s.$name, s, !0); } catch (e) { return void this.form.logger.error(`unable to setItems for ${this.qualifiedName} : ${e}`); } this._data = s; const r = this.syncDataAndFormModel(s); const a = this.items.length; r.added.forEach(((t) => { this.notifyDependents(e('items', t.getState(), null)), t.dispatch(new i()); })); for (let e = 0; e < a; e += 1) this._children[e].dispatch(new t()); r.removed.forEach(((t) => { this.notifyDependents(e('items', null, t.getState())); })); } else void 0 === this._data && console.warn(`Data node is null, hence importData did not work for panel "${this.name}". Check if parent has a dataRef set to null.`); }

  syncDataAndFormModel(e) { const t = { added: [], removed: [] }; if (e?.$type === 'array' && this._itemTemplate != null) { const i = e?.$value.length; const n = this._children.length; const s = this._jsonModel.maxItems === -1 ? i : this._jsonModel.maxItems; const r = this._jsonModel.minItems; let a = Math.min(i - n, s - n); const o = Math.min(n - i, n - r); for (;a > 0;) { a--; const e = this._addChild(this._itemTemplate, this.items.length, !0); e._initialize('create'), t.added.push(e); } if (o > 0) for (let e = 0; e < o; e++) this._childrenReference.pop(), t.removed.push(this._children.pop()); } return this._children.forEach(((t) => { let i = t.bindToDataModel(e); t.isContainer && !i && (i = e), t.syncDataAndFormModel(i); })), t; }

  get activeChild() { return this._activeChild; }

  set activeChild(t) { if (t !== this._activeChild) { let i = this._activeChild; for (;i instanceof Je;) { const e = i.activeChild; i.activeChild = null, i = e; } const n = e('activeChild', t?.getState(), this._activeChild?.getState()); this._activeChild = t, this.parent && t !== null && (this.parent.activeChild = this), this._jsonModel.activeChild = t?.id, this.notifyDependents(n); } }

  get enabled() { const e = this.parent?.enabled; return void 0 !== e ? !!e && this._jsonModel.enabled : this._jsonModel.enabled; }

  set enabled(e) { this._setProperty('enabled', e, !0, this.notifyChildren); }

  get readOnly() { return void 0 !== this.parent?.readOnly && !!this.parent.readOnly || this._jsonModel.readOnly; }

  set readOnly(e) { this._setProperty('readOnly', e, !0, this.notifyChildren); }

  notifyChildren(t) { if (void 0 !== t.payload && void 0 !== t.payload.changes) for (const i of t.payload.changes) void 0 !== i.propertyName && Xe.includes(i.propertyName) && this.items.forEach(((n) => { i.currentValue !== n._jsonModel[i.propertyName] && (n._jsonModel[i.propertyName] = i.currentValue, this.notifyDependents.call(n, e(i.propertyName, n.getState()[i.propertyName], null))), n.fieldType === 'panel' && this.notifyChildren.call(n, t); })); }
}O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Je.prototype, 'maxItems', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Je.prototype, 'minItems', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Je.prototype, 'activeChild', null); class Ke {
  _jsonModel;

  constructor(e) { this._jsonModel = { ...e }; }

  getP(e, t) { return ((e, t, i) => { if (t in e) return e[t]; if (!t.startsWith(':')) { const i = `:${t}`; if (i in e) return e[i]; } return i; })(this._jsonModel, e, t); }

  get isContainer() { return !1; }
} class Ze extends Ke {
  get version() { return this.getP('version', ''); }

  get grammar() { return this.getP('grammar', ''); }
} class Ye {
  lang;

  captchaInfo;

  constructor(e = {}) { this.lang = e.lang || 'en', this.captchaInfo = e.captchaInfo || {}, Object.keys(e).forEach(((t) => { t !== 'lang' && t !== 'captchaInfo' && (this[t] = e[t]); })); }
} const et = {
  off: 0, debug: 1, info: 2, warn: 3, error: 4,
}; class tt {
  debug(e) { this.log(e, 'debug'); }

  info(e) { this.log(e, 'info'); }

  warn(e) { this.log(e, 'warn'); }

  error(e) { this.log(e, 'error'); }

  log(e, t) { this.logLevel !== 0 && this.logLevel <= et[t] && console[t](e); }

  isLevelEnabled(e) { return this.logLevel !== 0 && this.logLevel <= et[e]; }

  logLevel;

  constructor(e = 'off') { this.logLevel = et[e]; }
} class it {
  _node;

  _event;

  constructor(e, t) { this._node = e, this._event = t; }

  get node() { return this._node; }

  get event() { return this._event; }

  isEqual(e) { return e != null && this._node == e._node && this._event.type == e._event.type; }

  toString() { return `${this._node.id}__${this.event.type}`; }

  valueOf() { return this.toString(); }
} class nt {
  logger;

  static MAX_EVENT_CYCLE_COUNT = 10;

  _runningEventCount;

  _isProcessing = !1;

  _pendingEvents = [];

  constructor(e = new tt('off')) { this.logger = e, this._runningEventCount = {}; }

  get length() { return this._pendingEvents.length; }

  get isProcessing() { return this._isProcessing; }

  isQueued(e, t) { const i = new it(e, t); return void 0 !== this._pendingEvents.find(((e) => i.isEqual(e))); }

  queue(e, t, i = !1) { e && t && (t instanceof Array || (t = [t]), t.forEach(((t) => { const n = new it(e, t); const s = this._runningEventCount[n.valueOf()] || 0; if (s < nt.MAX_EVENT_CYCLE_COUNT) { let r = ''; if (t?.type !== 'change' || t?.payload?.changes.map(((e) => e.propertyName)).includes('activeChild') ? t?.type.includes('setProperty') && (r = JSON.stringify(t.payload, null, 2)) : r = JSON.stringify(t.payload.changes, null, 2), this.logger.isLevelEnabled('info') && e.withDependencyTrackingControl(!0, (() => { this.logger.info(`Queued event : ${t.type} node: ${e.id} - ${e.qualifiedName} - ${r}`); })), i) { const e = this._isProcessing ? 1 : 0; this._pendingEvents.splice(e, 0, n); } else this._pendingEvents.push(n); this._runningEventCount[n.valueOf()] = s + 1; } else this.logger.info(`Skipped queueing event : ${t.type} node: ${e.id} - ${e.name} with count=${s}`); }))); }

  empty() { this._pendingEvents = []; }

  runPendingQueue() { if (!this._isProcessing) { for (this._isProcessing = !0; this._pendingEvents.length > 0;) { const e = this._pendingEvents[0]; this.logger.info(`Dequeued event : ${e.event.type} node: ${e.node.id} - ${e.node.name}`), e.node.executeAction(e.event), this._pendingEvents.shift(); } this._runningEventCount = {}, this._isProcessing = !1; } }
} const st = (e, t = null, i = {}) => { const n = { ...rt, ...i }; const s = n.method === 'GET' && t ? at(e, t) : e; return n.method !== 'GET' && (n.body = t), fetch(s, { ...n }).then((async (t) => { let i; t.ok || console.error(`Error while fetching response from ${e} : ${t.statusText}`), i = t?.headers?.get('Content-Type')?.includes('application/json') ? await t.json() : await t.text(); const n = {}; return t?.headers?.forEach(((e, t) => { n[t] = e; })), { status: t.status, body: i, headers: n }; })).catch(((t) => { throw console.error(`Network error while fetching from ${e}:`, t), t; })); }; const rt = { method: 'GET' }; const at = (e, t) => { if (!t) return e; let i = {}; try { i = JSON.parse(t); } catch (e) { console.log('Query params invalid'); } const n = []; return Object.keys(i).forEach(((e) => { Array.isArray(i[e]) ? n.push(`${encodeURIComponent(e)}=${encodeURIComponent(JSON.stringify(i[e]))}`) : n.push(`${encodeURIComponent(e)}=${encodeURIComponent(i[e])}`); })), n.length ? e.includes('?') ? `${e}&${n.join('&')}` : `${e}?${n.join('&')}` : e; }; const ot = (e) => { const t = e; return t.length > 0 && t.startsWith('custom:') ? t.substring(7) : t; }; const lt = async (e, t, i, n, s, r, a) => { const o = t; const l = { method: i }; let u; let f = {}; try { n instanceof Promise && (n = await n); } catch (r) { throw console.error('Error resolving payload Promise:', r), r; } if (n.body && n.headers && (f = { ...n }, a = { ...n.headers }, u = n = n.body), n && n instanceof me && n.data instanceof File) { const e = new FormData(); e.append(n.name, n.data), u = e; } else if (n instanceof FormData)u = n; else if (n && (typeof n === 'string' || typeof n === 'object' && Object.keys(n).length > 0)) { const e = Object.keys(a); e.length > 0 ? l.headers = { ...a, ...e.indexOf('Content-Type') === -1 ? { 'Content-Type': 'application/json' } : {} } : l.headers = { 'Content-Type': 'application/json' }; const t = l?.headers?.['Content-Type'] || 'application/json'; typeof n === 'object' && (t === 'application/json' ? u = JSON.stringify(n) : t.indexOf('multipart/form-data') > -1 ? u = dt(n) : t.indexOf('application/x-www-form-urlencoded') > -1 && (u = ut(n))), t === 'text/plain' && (u = String(n)); } const g = (t, i, n) => { const s = ot(i); i === 'submitError' ? (e.form.dispatch(new m(t, !0)), e.form.dispatch(new y(t, !0))) : e.field ? e.field.dispatch(new h(s, t, !0)) : e.form.dispatch(new h(s, t, !0)), e.form.dispatch(new p(n, !1)); }; const _ = e.$field || null; const v = { request: { url: o, method: i, ...f }, targetField: _, targetEvent: e.$event || null }; try { const t = await st(o, u, l); t.originalRequest = { url: o, method: i, ...f }, t.submitter = _; const n = { ...v, response: t, request: t.originalRequest }; if (t?.status >= 200 && t?.status <= 299) { const i = ot(s); s === 'submitSuccess' ? e.form.dispatch(new d(t, !0)) : e.field ? e.field.dispatch(new h(i, t, !0)) : e.form.dispatch(new h(i, t, !0)), e.form.dispatch(new c(n, !1)); } else e.form.logger.error('Error invoking a rest API'), g(t, r, n); return t; } catch (t) { e.form.logger.error('Network error while invoking a rest API:', t); const i = { body: null, headers: {}, error: t instanceof Error ? t.message : String(t) }; const n = { ...v, response: i }; g(i, r, n), e.form.dispatch(new p(n, !1)); } }; const ut = (e) => { const t = new URLSearchParams(); return Object.entries(e).forEach((([e, i]) => { i != null && typeof i === 'object' ? t.append(e, G(i)) : t.append(e, i); })), t; }; const dt = (e, t) => { const i = new FormData(); Object.entries(e).forEach((([e, t]) => { t != null && typeof t === 'object' ? i.append(e, G(t)) : i.append(e, t); })); const n = (e, t) => { if (e?.data instanceof File) { let i = `${e?.dataRef}/${e?.name}`; i.startsWith('/') || (i = `/${i}`), t.append(i, e.data); } }; return t && Object.keys(t).reduce(((e, s) => { const r = t[s]; return r && r instanceof Array ? [...e, ...r.map(((e) => n(e, i)))] : [...e, n(r, i)]; }), []), i; }; const ht = (e, t = {}, r = !1) => { switch (e) { case 'change': return new s(t); case 'submit': return new f(t); case 'save': return new g(t); case 'click': return new E(t); case 'addItem': return new j(t); case 'removeItem': return new n(t); case 'reset': return new _(t); case 'addInstance': return new b(t); case 'removeInstance': return new M(t); case 'invalid': return new u(t); case 'valid': return new l(t); case 'initialize': return new i(t); case 'focus': return new v(t); default: console.error('invalid action'); } }; class ct {
  static instance = null;

  customFunctions = {};

  constructor() {}

  static getInstance() { return ct.instance || (ct.instance = new ct()), ct.instance; }

  registerFunctions(e) {
    Object.entries(e).forEach((([e, t]) => {
      let i = t; typeof t === 'function' && (i = {
        _func: (e, i, n) => {
          const s = {
            form: n.globals.$form,
            field: n.globals.$field,
            event: n.globals.$event,
            functions: {
              setProperty: (e, t) => { const s = [e, 'custom:setProperty', t]; return ct.getInstance().getFunctions().dispatchEvent._func.call(void 0, s, i, n); }, reset: (e) => { const t = [e = e || 'reset', 'reset']; return n.globals.form.logger.warn('This usage of reset is deprecated. Please see the documentation and update.'), ct.getInstance().getFunctions().dispatchEvent._func.call(void 0, t, i, n); }, validate: (e) => { const t = [e]; return ct.getInstance().getFunctions().validate._func.call(void 0, t, i, n); }, importData: (e, t) => { const s = [e, t]; return ct.getInstance().getFunctions().importData._func.call(void 0, s, i, n); }, exportData: () => ct.getInstance().getFunctions().exportData._func.call(void 0, e, i, n), submitForm: (e, t, s) => { const r = [e, t, s || 'multipart/form-data']; return ct.getInstance().getFunctions().submitForm._func.call(void 0, r, i, n); }, markFieldAsInvalid: (e, t, i) => { !i || i.useId ? n.globals.form.getElement(e)?.markAsInvalid(t) : i && i.useDataRef ? n.globals.form.visit(((i) => { i.dataRef === e && i.markAsInvalid(t); })) : i && i.useQualifiedName && n.globals.form.resolveQualifiedName(e)?.markAsInvalid(t); }, setFocus: (e, t) => { const s = [e, t]; return ct.getInstance().getFunctions().setFocus._func.call(void 0, s, i, n); }, dispatchEvent: (e, t, s, r) => { const a = [e, t, s, r]; return ct.getInstance().getFunctions().dispatchEvent._func.call(void 0, a, i, n); }, getFiles: (e) => { const t = {}; e || n.globals.form.visit(((e) => { e.fieldType === 'file-input' && e.value && (t[e.qualifiedName] = e.serialize()); })); const i = n.globals.form.resolveQualifiedName(e); return i?.fieldType === 'file-input' && i?.value && (t[e] = i.serialize()), t; },
            },
          }; return t(...e, s);
        },
        _signature: [],
      }), i.hasOwnProperty('_func') ? ct.getInstance().customFunctions[e] = i : console.warn(`Unable to register function with name ${e}.`);
    }));
  }

  unregisterFunctions(...e) { e.forEach(((e) => { e in ct.getInstance().customFunctions && delete ct?.getInstance().customFunctions[e]; })); }

  getFunctions() {
    function e(t) { return t == null ? t : (i = t) !== null && Object.prototype.toString.call(i) === '[object Array]' ? t.map(((t) => e(t))) : t.valueOf(); let i; } function t(e) { return e == null ? '' : e.toString(); } const i = {
      validate: { _func: (e, t, i) => { const n = e[0]; let s; return s = typeof n === 'string' || void 0 === n ? i.globals.form.validate() : i.globals.form.getElement(n.$id).validate(), Array.isArray(s) && s.length && i.globals.form.logger.warn('Form Validation Error'), s; }, _signature: [] },
      setFocus: { _func: (e, t, i) => { const n = e[0]; const s = e[1]; try { const e = i.globals.form.getElement(n?.$id) || i.globals.field; i.globals.form.setFocus(e, s); } catch (e) { i.globals.form.logger.error('An error has occurred within the setFocus API.'); } }, _signature: [] },
      getData: { _func: (e, t, i) => (i.globals.form.logger.warn('The `getData` function is depricated. Use `exportData` instead.'), i.globals.form.exportData()), _signature: [] },
      exportData: { _func: (e, t, i) => i.globals.form.exportData(), _signature: [] },
      importData: { _func: (e, t, i) => i.globals.form.withDependencyTrackingControl(!0, (() => { const t = e[0]; const n = e[1]; if (typeof t !== 'object' || t === null || n) { const e = i.globals.form.resolveQualifiedName(n); e?.isContainer ? e.importData(t, n) : i.globals.form.logger.error('Invalid argument passed in importData. A container is expected'); } else i.globals.form.importData(t); return {}; })), _signature: [] },
      submitForm: {
        _func: async (i, n, s) => {
          let r; let a; let o; let l = null; let u = null; i.length > 0 && typeof e(i[0]) === 'object' ? (r = i.length > 0 ? e(i[0]) : null, a = !(i.length > 1) || e(i[1]), o = i.length > 2 ? t(i[2]) : 'multipart/form-data') : (s.globals.form.logger.warn('This usage of submitForm is deprecated. Please see the documentation and update'), l = t(i[0]), u = t(i[1]), o = i.length > 2 ? t(i[2]) : 'multipart/form-data', r = i.length > 3 ? e(i[3]) : null, a = !(i.length > 4) || e(i[4])); const d = s.globals.form; if (d.captcha && (d.captcha.captchaDisplayMode === q.INVISIBLE || d.captcha.properties['fd:captcha']?.config?.version === 'enterprise' && d.captcha.properties['fd:captcha']?.config?.keyType === 'score')) { if (typeof s.runtime.functionTable.fetchCaptchaToken?._func !== 'function') return s.globals.form.logger.error('fetchCaptchaToken is not defined'), s.globals.form.dispatch(new m({ type: 'FetchCaptchaTokenNotDefined' })), {}; try { const e = await s.runtime.functionTable.fetchCaptchaToken._func([], n, s); d.captcha.value = e; } catch (e) { return s.globals.form.logger.error('Error while fetching captcha token'), s.globals.form.dispatch(new m({ type: 'FetchCaptchaTokenFailed' })), {}; } } return s.globals.form.dispatch(new f({
            success: l, error: u, submit_as: o, validate_form: a, data: r,
          })), {};
        },
        _signature: [],
      },
      saveForm: { _func: (e, i, n) => { const s = t(e[0]); const r = e[2] || !1; return n.globals.form.dispatch(new g({ action: s, validate_form: r })), {}; }, _signature: [] },
      setVariable: { _func: (e, i, n) => { const s = t(e[0]); let r = e[1]; const a = e[2] || n.globals.form; if (r && typeof r === 'object' && r.$qualifiedName) { r = n.globals.form.getElement(r.$id)._jsonModel.value; } return (a.$id ? n.globals.form.getElement(a.$id) : n.globals.form).getPropertiesManager().updateSimpleProperty(s, r), {}; }, _signature: [] },
      getVariable: { _func: (e, i, n) => { const s = t(e[0]); const r = e[1] || n.globals.form; if (!s) return; const a = (r.$id ? n.globals.form.getElement(r.$id) : n.globals.form).getPropertiesManager(); if (s.includes('.')) { const e = s.replace(/\[/g, '.').replace(/\]/g, '').split('.').filter(Boolean); let t = a.properties; for (const i of e) { if (t == null) return; t = t[i]; } return t; } return a.ensurePropertyDescriptor(s), a.properties[s]; }, _signature: [] },
      request: { _func: (i, n, s) => { const r = t(i[0]); const a = t(i[1]); let o; let l; let u; let d = {}; if (i[2] && typeof i[2] === 'object' && !i[2].then && ('data' in i[2] || 'headers' in i[2])) { const t = e(i[2]); o = t.data, d = t.headers || {}, l = e(i[3]), u = e(i[4]); } else o = e(i[2]), typeof i[3] === 'string' ? (s.globals.form.logger.warn('This usage of request is deprecated. Please see the documentation and update'), l = e(i[3]), u = e(i[4])) : (d = e(i[3]), l = e(i[4]), u = e(i[5])); return lt(s.globals, r, a, o, l, u, d); }, _signature: [] },
      requestWithRetry: { _func: (i, n, s) => { const r = t(i[0]); const a = t(i[1]); let o; let l; let u = e(i[2]); return typeof i[3] === 'string' && i.length === 5 ? (o = e(i[3]), l = e(i[4])) : typeof i[4] === 'string' && i.length === 6 && (o = e(i[4]), l = e(i[5])), async (e) => { try { u instanceof Promise && (u = await u); } catch (e) { throw console.error('Error resolving payload Promise:', e), e; } let t = {}; let n = {}; i.length === 5 ? (n = u.body || {}, t = u.headers || {}) : (n = u || {}, t = i[3] || {}), e && (e.body && (n = { ...n, ...e.body }), e.headers && (t = { ...t, ...e.headers })); const d = { body: n, headers: t }; try { return await lt(s.globals, r, a, d, o, l, t); } catch (e) { if (e && typeof e === 'object' && 'status' in e && e.status >= 400) throw e; throw new Error('Request failed'); } }; }, _signature: [] },
      retryHandler: { _func: (t, i, n) => e(t[0])(), _signature: [] },
      awaitFn: { _func: async (e, t, n) => { const s = e[1]; const r = n.globals.$field; try { const a = await e[0]; i.dispatchEvent._func([r, s, a], t, n); } catch (s) { const a = e[2]; a && i.dispatchEvent._func([r, a, s], t, n); } return {}; }, _signature: [] },
      addInstance: { _func: (t, i, n) => { const s = t[0]; const r = t.length > 1 ? e(t[1]) : void 0; try { const e = n.globals.form.getElement(s.$id); const t = ht('addInstance', r); e.addItem(t); } catch (e) { n.globals.form.logger.error('Invalid argument passed in addInstance. An element is expected'); } }, _signature: [] },
      removeInstance: { _func: (t, i, n) => { const s = t[0]; const r = t.length > 1 ? e(t[1]) : void 0; try { const e = n.globals.form.getElement(s.$id); const t = ht('removeInstance', r); e.removeItem(t); } catch (e) { n.globals.form.logger.error('Invalid argument passed in removeInstance. An element is expected'); } }, _signature: [] },
      dispatchEvent: { _func: (t, i, n) => { const s = t[0]; if (s === null && typeof n !== 'string') return n.debug.push('Invalid argument passed in dispatchEvent. An element is expected'), {}; let r; let a = e(t[1]); let o = t.length > 2 ? e(t[2]) : void 0; let l = t.length > 3 && e(t[3]); if (typeof s === 'string' && (o = a, a = s, l = !0), r = a.startsWith('custom:') ? new h(a.substring(7), o, l) : ht(a, o, l), r != null) if (typeof s === 'string')n.globals.form.dispatch(r); else { const e = (e, t, i) => { i.globals.form.getElement(e.$id).dispatch(t); }; Array.isArray(s) && s.length > 0 && void 0 === s.$id ? s.forEach(((t) => { e(t, r, n); })) : e(s, r, n); } return {}; }, _signature: [] },
      encrypt: { _func: async (t, i, n) => e(t[0]), _signature: [] },
      decrypt: { _func: async (t, i, n) => e(t[0]), _signature: [] },
      getQueryParameter: { _func: (e, i, n) => { const s = t(e[0]); if (!s) return n.globals.form.logger.error('Argument is missing in getQueryParameter. A parameter is expected'), ''; const r = n.globals.form?.properties?.queryParams; if (r) { if (void 0 !== r[s]) return r[s]; const e = s.toLowerCase(); for (const [t, i] of Object.entries(r)) if (t.toLowerCase() === e) return i; } try { const e = new URLSearchParams(window?.location?.search || ''); const t = e.get(s) || Array.from(e.entries()).find((([e]) => e.toLowerCase() === s.toLowerCase()))?.[1]; if (t != null) return t; } catch (e) { n.globals.form.logger.warn('Error reading URL parameters:', e); } return ''; }, _signature: [] },
      getBrowserDetail: { _func: (e, i, n) => { const s = t(e[0]); return s ? n.globals.form?.properties?.browserDetails?.[s] ? n.globals.form.properties.browserDetails[s] : typeof navigator !== 'undefined' && s in navigator ? navigator[s] || '' : (n.globals.form.logger.warn(`Invalid or unsupported browser detail requested: "${s}"`), '') : (n.globals.form.logger.error('Argument is missing in getBrowserDetail. A parameter is expected'), ''); }, _signature: [] },
      getURLDetail: { _func: (e, i, n) => { const s = t(e[0]); return s ? n.globals.form?.properties?.urlDetails?.[s] ? n.globals.form.properties.urlDetails[s] : typeof window !== 'undefined' && void 0 !== window.location && s in window.location ? window.location[s] || '' : (n.globals.form.logger.warn(`Invalid or unsupported url parameter requested: "${s}"`), '') : (n.globals.form.logger.error('Argument is missing in getURLDetail. A parameter is expected'), ''); }, _signature: [] },
      getRelativeInstanceIndex: { _func: (t, i, n) => { if (!Array.isArray(t[0]) || t[0].length === 0) return -1; const s = e(t[0])[0].$parent; const r = n.globals.$field; const a = s.$qualifiedName; const o = r.$qualifiedName; if (o.startsWith(`${a}[`)) { const e = a.length + 1; const t = o.indexOf(']', e); if (t !== -1) { const i = Number(o.slice(e, t)); if (!Number.isNaN(i)) return i; } } return s.length - 1; }, _signature: [] },
      today: { _func: () => { const e = new Date(Date.now()); return new Date(e.getFullYear(), e.getMonth(), e.getDate()) / 864e5; }, _signature: [] },
    }; return { ...i, ...ct.getInstance().customFunctions };
  }
} const pt = ct.getInstance(); class mt {
  #e;

  #t;

  #i;

  #n = !0;

  constructor(e) { const t = e.match(/([^.]+)\.([^.]+)(?:\.(.+))?/); if (!t) throw new Error(`Invalid version string ${e}`); if (this.#t = +t[1], this.#e = +t[2], this.#i = t[3] ? +t[3] : 0, isNaN(this.#t) || isNaN(this.#e) || isNaN(this.#i)) throw new Error(`Invalid version string ${e}`); }

  get major() { return this.#t; }

  get minor() { return this.#e; }

  get subversion() { return this.#i; }

  completeMatch(e) { return this.major === e.major && this.minor === e.minor && this.#i === e.subversion; }

  lessThan(e) { return this.major < e.major || this.major === e.major && this.minor < e.minor || this.major === e.major && this.minor === e.minor && this.#i < e.subversion; }

  toString() { return `${this.major}.${this.minor}.${this.subversion}`; }

  valueOf() { return this.toString(); }
} const ft = new mt('0.13'); const gt = new mt('0.13'); class _t extends Je {
  _ruleEngine;

  _eventQueue;

  additionalSubmitMetadata = {};

  _fields = {};

  _ids;

  _invalidFields = [];

  _exportDataAttachmentMap = {};

  promises = [];

  _captcha = null;

  constructor(e, n, a, o = new nt(), l = 'off', u = 'create') { super(e, { fieldFactory: n, mode: u }), this._ruleEngine = a, this._eventQueue = o, this._logger = new tt(l), this._applyDefaultsInModel(), u === 'create' && (this.queueEvent(new i()), this.changeEventBehaviour === 'deps' ? this.queueEvent(new s({ changes: [] })) : this.queueEvent(new t())), this._ids = (function* (e = 50) { const t = function () { const t = []; for (let i = 0; i < e; i++)t.push(_e(10)); return t; }; const i = {}; let n = t(); do { let e = n.pop(); for (;e in i;)n.length === 0 && (n = t()), e = n.pop(); i[e] = !0, yield n.pop(), n.length === 0 && (n = t()); } while (n.length > 0); }()), this.bindToDataModel(new ee('$form', {})), this._initialize(u), u === 'create' && this.queueEvent(new r()); }

  addPromises(e) { this.promises.push(e); }

  async waitForPromises() { let e = 0; for (;this.promises.length > e;)e = this.promises.length, await Promise.all(this.promises); this.promises = []; }

  _applyDefaultsInModel() { const e = this.specVersion; this._jsonModel.properties = this._jsonModel.properties || {}, this._jsonModel.fieldType = this._jsonModel.fieldType || 'form', (e.lessThan(gt) || typeof this._jsonModel.properties['fd:changeEventBehaviour'] !== 'string') && (this._jsonModel.properties['fd:changeEventBehaviour'] = 'self'); }

  _logger;

  get activeField() { return this._findActiveField(this); }

  _findActiveField(e) { return e?.isContainer ? this._findActiveField(e?.activeChild) : e; }

  get logger() { return this._logger; }

  get changeEventBehaviour() { return this.properties['fd:changeEventBehaviour'] === 'deps' ? 'deps' : 'self'; }

  dataRefRegex = /("[^"]+?"|[^.]+?)(?:\.|$)/g;

  get metaData() { const e = this._jsonModel.metadata || {}; return new Ze(e); }

  get action() { return this._jsonModel.action; }

  get isFragment() { return !1; }

  importData(e) { this.bindToDataModel(new ee('$form', e)), this.syncDataAndFormModel(this.getDataNode()), this._eventQueue.runPendingQueue(); }

  exportData(e = {}) { this._exportDataAttachmentMap = e; const t = this.getDataNode()?.$value; return this._exportDataAttachmentMap = {}, t; }

  setAdditionalSubmitMetadata(e) { this.additionalSubmitMetadata = { ...this.additionalSubmitMetadata, ...e }; }

  get specVersion() { if (typeof this._jsonModel.adaptiveform !== 'string') return ft; try { return new mt(this._jsonModel.adaptiveform); } catch (e) { return console.log(e), console.log(`Falling back to default version${ft.toString()}`), ft; } }

  resolveQualifiedName(e) { if (this.qualifiedName === e) return this; let t = null; return this.visit(((i) => { i.qualifiedName === e && (t = i); })), t; }

  exportSubmitMetaData() { return this.withDependencyTrackingControl(!0, (() => { const e = {}; this.visit(((t) => { t.fieldType === 'captcha' && (e[t.qualifiedName] = t.value); })); const t = {}; const i = this.properties['fd:draftId'] || ''; i && (t['fd:draftId'] = i); const n = this.properties['fd:dor']; if (n && n.dorType !== 'none') { const e = n['fd:excludeFromDoRIfHidden']; let i = []; i = Object.values(this._fields).filter(((t) => !1 === t.enabled || e && !1 === t.visible)).map(((e) => e.qualifiedName.split('.').slice(1).map(((e) => (e.match(/\[\d+\]$/) ? e : e !== '' ? `${e}[0]` : e))).join('.'))), i && i.length > 0 && (t.excludeFromDoR = i); }Object.keys(t).length > 0 && this.setAdditionalSubmitMetadata(t); const s = { lang: this.lang, captchaInfo: e, ...this.additionalSubmitMetadata }; return new Ye(s); })); }

  #s(e) { return e.filter(((e) => !0 === e.visible)); }

  #r(e) { const t = this.#s(e.items); return t && t.length > 0 ? t[0] : null; }

  #a(e) { if (!e.isContainer) return void (e.parent.activeChild = e); this.#o(e); const t = e.activeChild || this.#r(e); t !== null ? this.#a(t) : e.parent.activeChild = e; }

  #l(e, t) { return e < t.length - 1 ? t[e + 1] : null; }

  #u(e, t) { return e > 0 ? t[e - 1] : null; }

  #o(e) { const t = e.parent; t != null && t.activeChild != null && (t.activeChild = null); }

  setFocus(e, t) { const i = this._ruleEngine.getDependencyTracking(); this._ruleEngine.setDependencyTracking(!1); try { if (!t) return this.#o(e), void this.#a(e); const i = e?.isContainer ? e : e.parent; const n = this.#s(i.items); let s = i.activeChild; let r = s !== null ? n.indexOf(s) : -1; if (i.activeChild === null) return this.#a(n[0]), void (r = 0); t === R.NEXT_ITEM ? s = this.#l(r, n) : t === R.PREVIOUS_ITEM && (s = this.#u(r, n)), s !== null && this.#a(s); } finally { this._ruleEngine.setDependencyTracking(i); } }

  getState(e = !1) { const t = this; const i = super.getState(!1, e); return i.id = '$form', Object.defineProperty(i, 'data', { get() { return t.exportData(); } }), Object.defineProperty(i, 'attachments', { get() { return Me(t); } }), i; }

  get type() { return 'object'; }

  isTransparent() { return !1; }

  get form() { return this; }

  get ruleEngine() { return this._ruleEngine; }

  getUniqueId(e) { if (e && !this._idSet?.has(e)) return this._idSet?.add(e), e; if (this._ids == null) return ''; const t = this._ids.next().value; return this._idSet?.add(t), t; }

  clearIdRegistry() { this._idSet?.clear(); }

  fieldAdded(e) { e.fieldType !== 'captcha' || this._captcha || (this._captcha = e), this._fields[e.id] = e, e.subscribe(((e) => { this._invalidFields.indexOf(e.target.id) === -1 && this._invalidFields.push(e.target.id); }), 'invalid'), e.subscribe(((e) => { const t = this._invalidFields.indexOf(e.target.id); t > -1 && this._invalidFields.splice(t, 1); }), 'valid'), e.subscribe(((e) => { const t = e.target.getState(); if (e.payload.changes.length > 0 && t) { const i = (e) => (e && typeof e === 'object' ? Array.isArray(e) ? e.map(i) : { ...e } : e); const n = e.payload.changes.map((({ propertyName: e, currentValue: t, prevValue: n }) => ({ propertyName: e, currentValue: i(t), prevValue: i(n) }))); const s = new a(n, t, e.payload.eventSource); this.notifyDependents(s); } })); }

  visit(e) { this.traverseChild(this, e); }

  traverseChild(e, t) { e.items.forEach(((e) => { e.isContainer && this.traverseChild(e, t), t(e); })); }

  validate() { const e = super.validate(); return this.dispatch(new o(e)), e; }

  isValid() { return this._invalidFields.length === 0; }

  dispatch(e) { e.type === 'submit' ? (super.queueEvent(e), this._eventQueue.runPendingQueue()) : super.dispatch(e); }

  submit(e, t) { const i = e?.payload?.validate_form; if (!1 === i || this.validate().length === 0) { const i = e?.payload || {}; const n = i?.success ? i?.success : 'submitSuccess'; const s = i?.error ? i?.error : 'submitError'; const r = i.action || this.action; const a = i.metadata || { submitMetadata: this.exportSubmitMetaData() }; (async (e, t, i, n = 'multipart/form-data', s = null, r = '', a = null) => { const o = r || e.form.action; let l = s; const u = await ve(e.form, !0); typeof l === 'object' && l != null || (l = e.form.exportData(u)); let d = n; const h = { data: l, ...a }; let c = h; (Object.keys(u).length > 0 || n === 'multipart/form-data') && (c = dt(h, u), d = 'multipart/form-data'), await lt(e, o, 'POST', c, t, i, { 'Content-Type': d }); })(t, n, s, i?.save_as || i?.submit_as, i?.data, r, a); } }

  save(e, t) { const i = e?.payload || {}; i.save_as = 'multipart/form-data', i.metadata = { draftMetadata: { lang: this.lang, 'fd:draftId': this.properties['fd:draftId'] || '' } }, i.success = 'custom:saveSuccess', i.error = 'custom:saveError', this.submit(e, t), this.subscribe(((e) => { this._saveSuccess(e); }), 'saveSuccess'); }

  _saveSuccess(e) { const t = e?.payload?.body?.draftId || ''; const i = this.properties; t && i && (i['fd:draftId'] = t); }

  reset() { super.reset(), this._invalidFields = []; }

  getElement(e) { return e == this.id ? this : this._fields[e]; }

  get qualifiedName() { return '$form'; }

  getEventQueue() { return this._eventQueue; }

  get name() { return '$form'; }

  get value() { return null; }

  get id() { return this._jsonModel.id || '$form'; }

  get title() { return this._jsonModel.title || ''; }

  get captcha() { return this._captcha; }
} function yt(e) { if (e == null) { const t = (new Intl.DateTimeFormat()).resolvedOptions(); e = t.locale; } return (t) => (function (e, t) { if (e === null) return 0; const i = +e; if (!isNaN(i)) return i; if (t) { const i = T(e, t, !0); if (i !== e) return I(i); } return 0; }(t, e)); } class vt {
  _context;

  _globalNames = ['$form', '$field', '$event'];

  customFunctions;

  debugInfo = [];

  dependencyTracking = !0;

  constructor() { this.customFunctions = pt.getFunctions(); }

  compileRule(e, t) { const i = new x(this.customFunctions, yt(t), this.debugInfo); return { formula: i, ast: i.compile(e, this._globalNames) }; }

  execute(e, t, i, n = !1, s) { const { formula: r, ast: a } = e; const o = this._context; let l; this._context = i; try { l = r.run(a, t, 'en-US', i); } catch (e) { this._context?.form?.logger?.error(e); } if (this.debugInfo.length) for (this._context?.form?.logger?.warn(`Form rule expression string: ${s}`); this.debugInfo.length > 0;) this._context?.form?.logger?.warn(this.debugInfo.pop()); let u = l; return n && typeof l === 'object' && l !== null && (u = Object.getPrototypeOf(l).valueOf.call(l)), this._context = o, u; }

  trackDependency(e, t) { this.dependencyTracking && this._context && void 0 !== this._context.field && this._context.field !== e && e._addDependent(this._context.field, t); }

  setDependencyTracking(e) { this.dependencyTracking = e; }

  getDependencyTracking() { return this.dependencyTracking; }
} class Mt extends Je {
  constructor(e, n) { super(e, n), n.mode !== 'restore' && (this._applyDefaults(), this.queueEvent(new i()), this.queueEvent(new t())); }

  _getDefaults() {
    return {
      ...super._getDefaults(), visible: !0, required: !1, label: { visible: !0, richText: !1 },
    };
  }

  _applyDefaults() { super._applyDefaultsInModel(), this._jsonModel.dataRef && void 0 === this._jsonModel.type && (this._jsonModel.type = 'object'); }

  get type() { const e = super.type; if (e === 'array' || e === 'object') return e; }

  get items() { return super.items ? super.items : []; }

  get value() { return this.getDataNode()?.$value; }

  get fieldType() { return 'panel'; }
} class bt extends Mt {
  get maxOccur() { return this._jsonModel.maxItems; }

  set maxOccur(e) { this.maxItems = e; }

  get minOccur() { return this.minItems; }

  addInstance(e) { return this.addItem(e); }

  removeInstance(e) { return this.removeItem(e); }
}O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], bt.prototype, 'maxOccur', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], bt.prototype, 'minOccur', null); const jt = ['string', 'number', 'integer', 'boolean', 'file', 'string[]', 'number[]', 'integer[]', 'boolean[]', 'file[]', 'array', 'object']; class Et extends Ge {
  _ruleNodeReference = [];

  _hasValueBeenSet = !1;

  get hasValueBeenSet() { return this._hasValueBeenSet; }

  constructor(e, n) { super(e, n), n.mode !== 'restore' && (this._applyDefaults(), this.queueEvent(new i()), this.form.changeEventBehaviour === 'deps' ? this.queueEvent(new s({ changes: [] })) : this.queueEvent(new t())); }

  _initialize() { super._initialize(), this.setupRuleNode(); }

  ruleNodeReference() { return this.type?.endsWith('[]') ? this._ruleNodeReference = [] : this._ruleNodeReference = this, this._ruleNodeReference; }

  _getDefaults() {
    return {
      readOnly: !1, enabled: !0, visible: !0, label: { visible: !0, richText: !1 }, required: !1, type: this._getFallbackType(),
    };
  }

  _getFallbackType() {
    const e = this._jsonModel.type; let t = e; if (typeof e !== 'string' || jt.indexOf(e) === -1) {
      const e = this.enum; if (t = typeof e?.[0], t === 'undefined' && void 0 !== this._jsonModel.default && (t = this._jsonModel.default instanceof Array && this._jsonModel.default.length > 0 ? `${typeof this._jsonModel.default[0]}[]` : typeof this._jsonModel.default), t.indexOf('undefined') === 0) {
        t = {
          'text-input': 'string', 'multiline-input': 'string', 'number-input': 'number', 'date-input': 'string', 'date-time': 'string', email: 'string', 'plain-text': 'string', image: 'string', checkbox: 'boolean',
        }[this.fieldType];
      }
    } return t;
  }

  _applyDefaults() { super._applyDefaultsInModel(), this.coerceParam('required', 'boolean'), this.coerceParam('readOnly', 'boolean'), this.coerceParam('enabled', 'boolean'); const e = this._jsonModel.type; typeof e === 'string' && jt.indexOf(e) !== -1 || (this._jsonModel.type = this._getFallbackType()), ['plain-text', 'image'].indexOf(this.fieldType) === -1 ? this._jsonModel.value = void 0 : this.fieldType === 'image' ? this._jsonModel.value = this._jsonModel?.properties?.['fd:repoPath'] ?? this._jsonModel.value : this._jsonModel.default = this._jsonModel.default || this._jsonModel.value; if (void 0 === this._jsonModel.value) { const e = Pe.type(this.getInternalType() || 'string', this._jsonModel.default); this._jsonModel.value = e.value; } if (this._jsonModel.type !== 'string' && this.unset('emptyValue'), void 0 === this._jsonModel.fieldType && (this.form.logger.debug('fieldType property is mandatory. Please ensure all the fields have a fieldType'), this._jsonModel.viewType ? (this._jsonModel.viewType.startsWith('custom:') ? this.form.logger.error('viewType property has been removed. For custom types, use :type property') : this.form.logger.error('viewType property has been removed. Use fieldType property'), this._jsonModel.fieldType = this._jsonModel.viewType) : this._jsonModel.fieldType = Q(this._jsonModel)), void 0 === this._jsonModel.enum) { this._jsonModel.type === 'boolean' && (this._jsonModel.enum = [!0, !1]); } else for (void 0 === this._jsonModel.enumNames && (this._jsonModel.enumNames = this._jsonModel.enum.map(((e) => e.toString()))); this._jsonModel.enumNames.length < this._jsonModel.enum.length;) this._jsonModel.enumNames.push(this._jsonModel.enum[this._jsonModel.enumNames.length].toString()); const t = ['minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum']; this._jsonModel.type !== 'string' ? this._jsonModel.fieldType === 'file-input' ? this.unset('pattern', 'minLength', 'maxLength') : this.unset('format', 'pattern', 'minLength', 'maxLength') : this._jsonModel.fieldType === 'date-input' && (this._jsonModel.format = 'date'), this.coerceParam('minLength', 'number'), this.coerceParam('maxLength', 'number'), this._jsonModel.type !== 'number' && this._jsonModel.format !== 'date' && this._jsonModel.format !== 'date-time' && this._jsonModel.type !== 'integer' && this.unset('step', ...t), t.forEach(((e) => { this.coerceParam(e, this._jsonModel.type === 'integer' ? 'number' : this._jsonModel.type); })), typeof this._jsonModel.step !== 'number' && this.coerceParam('step', 'number'); }

  unset(...e) { e.forEach(((e) => this._jsonModel[e] = void 0)); }

  coerceParam(e, t) { const i = this._jsonModel[e]; if (void 0 !== i && typeof i !== t) { this.form.logger.info(`${e} is not of type ${t}. Trying to coerce.`); try { this._jsonModel[e] = ((e, t) => { let i; switch (t) { case 'string': return `${e}`; case 'number': if (i = +e, !isNaN(i)) return i; break; case 'boolean': if (typeof e === 'string') return e === 'true'; if (typeof e === 'number') return e !== 0; } throw `${e} has invalid type. Expected : ${t}, Actual ${typeof e}`; })(i, t); } catch (t) { this.form.logger.warn(t), this.unset(e); } } }

  get editFormat() { return this.withCategory(this._jsonModel.editFormat); }

  get displayFormat() { return this.withCategory(this._jsonModel.displayFormat); }

  get displayValueExpression() { return this._jsonModel.displayValueExpression; }

  get placeholder() { return this._jsonModel.placeholder; }

  get readOnly() { return void 0 !== this.parent.readOnly && !0 === this.parent.readOnly || this._jsonModel.readOnly; }

  set readOnly(e) { this._setProperty('readOnly', e); }

  get enabled() { const e = this.parent?.enabled; return void 0 !== e ? !!e && this._jsonModel.enabled : this._jsonModel.enabled; }

  set enabled(e) { this._setProperty('enabled', e); }

  get valid() { return this._jsonModel?.validity?.valid; }

  set valid(e) { const t = { valid: e, ...e ? {} : { customConstraint: !0 } }; this._setProperty('valid', e), this._setProperty('validity', t); }

  get validity() { return this._jsonModel.validity; }

  get emptyValue() { return this._jsonModel.emptyValue === 'null' ? null : this._jsonModel.emptyValue === '' && this.type === 'string' ? '' : void 0; }

  get enum() { return this._jsonModel.enum; }

  set enum(e) { this._setProperty('enum', e); }

  get enumNames() { return this._jsonModel.enumNames; }

  set enumNames(e) { this._setProperty('enumNames', e); }

  get required() { return this._jsonModel.required || !1; }

  set required(e) { this._setProperty('required', e); }

  get maximum() { if (this.type === 'number' || this.format === 'date' || this.format === 'date-time' || this.type === 'integer') return this._jsonModel.maximum; }

  set maximum(e) { this.type !== 'number' && this.format !== 'date' && this.format !== 'date-time' && this.type !== 'integer' || this._setProperty('maximum', e); }

  get minimum() { if (this.type === 'number' || this.format === 'date' || this.format === 'date-time' || this.type === 'integer') return this._jsonModel.minimum; }

  set minimum(e) { this.type !== 'number' && this.format !== 'date' && this.format !== 'date-time' && this.type !== 'integer' || this._setProperty('minimum', e); }

  withCategory(e) { if (e) { const t = e?.match(/^(?:date|num)\|/); if (t === null) return this.format === 'date' ? e = `date|${e}` : this.type !== 'number' && this.type !== 'integer' || (e = `num|${e}`), e; } return e; }

  get editValue() { const e = this.editFormat; if (!e || !this.isNotEmpty(this.value) || !1 === this.valid) return this.value; try { return w(this.value, this.lang, e); } catch (e) { return this.value; } }

  get displayValue() { if (this.displayValueExpression && typeof this.displayValueExpression === 'string' && this.displayValueExpression.length !== 0) return this.executeExpression(this.displayValueExpression); const e = this.displayFormat; if (!e || !this.isNotEmpty(this.value) || !0 === this?.validity?.typeMismatch || (this.format === 'date' || this.format === 'date-time') && !0 === this?.validity?.formatMismatch) return this.value; try { return w(this.value, this.lang, e); } catch (e) { return this.value; } }

  getDataNodeValue(e) { return this.isEmpty() ? this.emptyValue : e; }

  updateDataNodeAndTypedValue(e) { const t = this.getDataNode(); if (Ve.indexOf(this.fieldType) > -1 && void 0 !== t && t !== Y) return; const i = this._getConstraintObject().type(this.getInternalType() || 'string', e); const n = this._setProperty('value', i.value, !1); return n.length > 0 && (this._hasValueBeenSet = !0, this._updateRuleNodeReference(i.value), void 0 !== t && t.setValue(this.getDataNodeValue(this._jsonModel.value), this._jsonModel.value, this)), n; }

  get value() { return void 0 === this._jsonModel.value ? null : this._jsonModel.value; }

  set value(e) { const t = this.updateDataNodeAndTypedValue(e); let i = { valid: !0 }; let n = 'type'; if (t?.length > 0) { let r = {}; const a = Pe.type(this.getInternalType() || 'string', e); if (this.parent.uniqueItems && this.parent.type === 'array' && (i = Pe.uniqueItems(this.parent.uniqueItems, this.parent.getDataNode().$value), n = 'uniqueItems'), a.valid && i.valid)r = this.evaluateConstraints(); else { const e = a.valid && i.valid; const t = { valid: e, errorMessage: a.valid && i.valid ? '' : this.getErrorMessage('type'), ...e ? {} : { validationMessage: e ? '' : this.getErrorMessage(n), validity: { valid: e, [A[n]]: !0 } } }; r = this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], t); }r.valid && this.triggerValidationEvent(r); const o = new s({ changes: t.concat(Object.values(r)), eventSource: this._eventSource }); this.dispatch(o); } }

  uiChange(e) { this._eventSource = P.UI, 'value' in e.payload ? this.value = e.payload.value : 'checked' in e.payload && (this.checked = e.payload.checked), this._eventSource = P.CODE; }

  reset() {
    const e = this.updateDataNodeAndTypedValue(this.default); if (!e) return; const t = {
      valid: void 0, errorMessage: '', validationMessage: '', validity: { valid: void 0 },
    }; const i = this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], t); const n = new s({ changes: e.concat(Object.values(i)) }); this.dispatch(n);
  }

  _updateRuleNodeReference(e) { if (this.type?.endsWith('[]')) if (e != null) for (e.forEach(((e, t) => { this._ruleNodeReference[t] = e; })); e.length !== this._ruleNodeReference.length;) this._ruleNodeReference.pop(); else for (;this._ruleNodeReference.length !== 0;) this._ruleNodeReference.pop(); }

  getInternalType() { return this.type; }

  valueOf() { const e = this[Ue]; const t = void 0 === e ? this : e; return t.ruleEngine.trackDependency(t, 'value'), t._jsonModel.value || null; }

  toString() { const e = this[Ue]; const t = void 0 === e ? this : e; return t._jsonModel.value?.toString() || ''; }

  getErrorMessage(e) { const t = e; const i = A[t]; const n = { ...F, ...k }; return this._jsonModel.constraintMessages?.[t === 'exclusiveMaximum' ? 'maximum' : t === 'exclusiveMinimum' ? 'minimum' : t] || ((e, t = []) => e?.replace(/\${(\d+)}/g, ((e, i) => { const n = t[i]; return void 0 !== n ? n : e; })))(n[i], [this._jsonModel[t]]); }

  get errorMessage() { return this._jsonModel.errorMessage; }

  set errorMessage(e) { this._setProperty('errorMessage', e), this._setProperty('validationMessage', e); }

  set constraintMessage(e) { if (Array.isArray(e)) { const t = { ...this._jsonModel.constraintMessages }; e.forEach((({ type: e, message: i }) => { t[e] = i; })), this._setProperty('constraintMessages', t); } else { const t = { ...this._jsonModel.constraintMessages, [e.type]: e.message }; this._setProperty('constraintMessages', t); } }

  _getConstraintObject() { return Pe; }

  isArrayType() { return !!this.type && this.type.indexOf('[]') > -1; }

  checkEnum(e, t) { if (!0 === this._jsonModel.enforceEnum && e != null) { const i = t.enum; return e instanceof Array && this.isArrayType() ? e.every(((e) => i(this.enum || [], e).valid)) : i(this.enum || [], e).valid; } return !0; }

  checkStep() { const e = this._jsonModel.value; const t = this._jsonModel.step; if (typeof t === 'number') { const i = t.toString().split('.')?.[1]?.length || 0; const n = 10 ** i; const s = t * n; const r = e * n; const a = (this._jsonModel.minimum || this._jsonModel.default || 0) * n; const o = (r - a) / s; const l = Math.abs(r - a) % s < 0.001; let u; let d; return l || (u = (Math.ceil(o) * s + a) / n, d = (u - s) / n), { valid: l, next: u, prev: d }; } return { valid: !0 }; }

  checkValidationExpression() { const e = this._jsonModel.validationExpression; return typeof e !== 'string' || e.length === 0 || this.executeExpression(e); }

  getConstraints() { switch (this.type) { case 'string': switch (this.format) { case 'date': return Fe.date; case 'date-time': return Fe.datetime; case 'email': return Fe.email; case 'binary': case 'data-url': return Fe.file; default: return Fe.string; } case 'file': return Fe.file; case 'number': case 'integer': return Fe.number; } return this.isArrayType() ? Fe.array : []; }

  get format() { if (void 0 === this._jsonModel.format && this.type === 'string') switch (this.fieldType) { case 'date-input': this._jsonModel.format = 'date'; break; case 'date-time': this._jsonModel.format = 'date-time'; } return this._jsonModel.format; }

  get enforceEnum() { return this._jsonModel.enforceEnum; }

  get tooltip() { return this._jsonModel.tooltip; }

  get maxLength() { return this._jsonModel.maxLength; }

  get minLength() { return this._jsonModel.minLength; }

  get pattern() { return this._jsonModel.pattern; }

  get step() { if (this.type === 'number' || this.format === 'date') return this._jsonModel.step; }

  get exclusiveMinimum() { if (this.type === 'number' || this.format === 'date' || this.type === 'integer') return this._jsonModel.exclusiveMinimum; }

  set exclusiveMinimum(e) { this.type !== 'number' && this.format !== 'date' && this.type !== 'integer' || (this._jsonModel.exclusiveMinimum = e); }

  get exclusiveMaximum() { if (this.type === 'number' || this.format === 'date' || this.type === 'integer') return this._jsonModel.exclusiveMaximum; }

  set exclusiveMaximum(e) { this.type !== 'number' && this.format !== 'date' && this.type !== 'integer' || (this._jsonModel.exclusiveMaximum = e); }

  get default() { return this._jsonModel.default; }

  isNotEmpty(e) { return e != null && e !== ''; }

  evaluateConstraints() {
    let e = 'type'; const t = this._jsonModel; const i = this._jsonModel.value; const n = this._getConstraintObject(); const s = this.getConstraints(); let r = !0; if (r && (r = n.required(this.required, i).valid && (!this.isArrayType() || !this.required || i.length > 0), e = 'required'), r && this.isNotEmpty(i)) { const a = s.find(((e) => { if (e in t && void 0 !== t[e]) { const s = t[e]; const r = n[e]; return i instanceof Array && this.isArrayType() ? Fe.array.indexOf(e) !== -1 ? !r(s, i).valid : i.some(((e) => !r(s, e).valid)) : typeof r === 'function' && !r(s, i).valid; } return !1; })); a != null ? (r = !1, e = a) : (r = this.checkEnum(i, n), e = 'enum', r && this.type === 'number' && (r = this.checkStep().valid, e = 'step'), r && (r = this.checkValidationExpression(), e = 'validationExpression')); }r || this.form.logger.info(`${e} constraint evaluation failed ${this._jsonModel[e]}. Received ${this._jsonModel.value}`); const a = {
      valid: r, errorMessage: r ? '' : this.getErrorMessage(e), validationMessage: r ? '' : this.getErrorMessage(e), validity: { valid: r, ...r ? {} : { [A[e]]: !0 } },
    }; return this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], a);
  }

  triggerValidationEvent(e) { e.validity && this.#d(); }

  #d() { this.validity.valid ? this.dispatch(new l()) : this.dispatch(new u()); }

  validate() { if (!1 === this.visible) return []; if (!1 === this.valid && this.errorMessage && this?.validity?.customConstraint) return [new V(this.id, [this._jsonModel.errorMessage])]; const e = this.evaluateConstraints(); return this.#d(), e.validity && this.notifyDependents(new s({ changes: Object.values(e) })), this.valid ? [] : [new V(this.id, [this._jsonModel.errorMessage])]; }

  syncDataAndFormModel(t) { if (void 0 !== t && t !== Y && t.$value !== this._jsonModel.value) { const i = e('value', t.$value, this._jsonModel.value); this._jsonModel.value = t.$value, this.queueEvent(i); } }

  defaultDataModel(e) { const t = Ve.indexOf(this.fieldType) > -1 ? void 0 : this.getDataNodeValue(this._jsonModel.value); return new K(e, t, this.type || 'string'); }

  getState(e = !1, t = !1) {
    return {
      ...super.getState(t), editFormat: this.editFormat, displayFormat: this.displayFormat, editValue: this.editValue, displayValue: this.displayValue, enabled: this.enabled, readOnly: this.readOnly,
    };
  }

  markAsInvalid(e, t = null) {
    const i = {
      valid: !1, errorMessage: e, validationMessage: e, validity: { valid: !1, ...t != null ? { [A[t]]: !0 } : { customConstraint: !0 } },
    }; const n = this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], i); const r = new s({ changes: [].concat(Object.values(n)) }); r.payload.changes.length !== 0 && (this.triggerValidationEvent(n), this.dispatch(r));
  }
} function xt(e, t) { return e.replace(';base64', `;name=${encodeURIComponent(t)};base64`); } async function wt(e) {
  const { name: t, size: i, type: n } = e; return await new Promise(((s, r) => {
    const a = new FileReader(); a.onload = (e) => {
      s(new me({
        data: xt(e.target.result, t), type: n, name: t, size: i,
      }));
    }, a.readAsDataURL(e.data);
  }));
}O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }, Be('button', 'image', 'plain-text')], Et.prototype, 'readOnly', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }, Be('image', 'plain-text')], Et.prototype, 'enabled', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'valid', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'validity', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'enum', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'enumNames', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'required', null), O([Qe('date-input', 'number-input')], Et.prototype, 'editValue', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'value', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'errorMessage', null), O([Qe('text-input', 'date-input', 'file-input', 'email', 'datetime-input')], Et.prototype, 'format', null), O([Qe('text-input')], Et.prototype, 'maxLength', null), O([Qe('text-input')], Et.prototype, 'minLength', null), O([Qe('text-input')], Et.prototype, 'pattern', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'exclusiveMinimum', null), O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], Et.prototype, 'exclusiveMaximum', null); class Tt extends Et {
  _getDefaults() { return { ...super._getDefaults(), accept: ['audio/*', 'video/*', 'image/*', 'text/*', 'application/pdf'], maxFileSize: '2MB' }; }

  _getFallbackType() { return 'file'; }

  get maxFileSize() { return be(this._jsonModel.maxFileSize); }

  get accept() { return this._jsonModel.accept; }

  _applyUpdates(e, t) { return e.reduce(((e, i) => { const n = this._jsonModel[i]; const s = t[i]; return s !== n && (e[i] = { propertyName: i, currentValue: s, prevValue: n }, this._jsonModel[i] = n instanceof me && typeof s === 'object' && i === 'value' ? new me({ ...n, data: s.data }) : s), e; }), {}); }

  getInternalType() { return this.type?.endsWith('[]') ? 'file[]' : 'file'; }

  getDataNodeValue(e) { let t = e; return t != null && (this.type === 'string' ? t = t.data?.toString() : this.type === 'string[]' && (t = t instanceof Array ? t : [t], t = t.map(((e) => e?.data?.toString())))), t; }

  async serialize() { const e = this._jsonModel.value; if (void 0 === e) return null; let t; return await (t = e instanceof Array ? e : [e], Promise.all([].map.call(t, wt))); }

  syncDataAndFormModel(t) { if (void 0 !== t && t !== Y) { const i = t?.$value; if (i != null) { const t = Pe.type(this.getInternalType(), i); t.valid || this.form.logger.debug(`unable to bind ${this.name} to data`), this.form.getEventQueue().queue(this, e('value', t.value, this._jsonModel.value)), this._jsonModel.value = t.value; } else this._jsonModel.value = null; } }
} class It extends Et {
  offValue() { const e = this.enum; return e.length > 1 ? e[1] : null; }

  _getConstraintObject() { const e = { ...super._getConstraintObject() }; let t; return e.required = (t = this.offValue(), (e, i) => ({ valid: Pe.required(e, i).valid && (!e || i != t), value: i })), e; }

  _applyDefaults() { typeof this._jsonModel.checked === 'boolean' && (this._jsonModel.checked ? this._jsonModel.default = this._jsonModel.enum?.[0] : this._jsonModel.default = this._jsonModel.enum?.[1]), super._applyDefaults(); }

  _getDefaults() { return { ...super._getDefaults(), enforceEnum: !0 }; }

  get enum() { return this._jsonModel.enum || []; }

  updateDataNodeAndTypedValue(e) { const t = super.updateDataNodeAndTypedValue(e); const i = t.find(((e) => e.propertyName === 'value')); if (i) { const e = i.prevValue === this._jsonModel.enum?.[0]; const n = i.currentValue === this._jsonModel.enum?.[0]; e !== n && t.push({ propertyName: 'checked', prevValue: e, currentValue: n }); } return t; }

  set checked(e) { this.value = e ? this._jsonModel.enum?.[0] : this._jsonModel.enum?.[1]; }

  get checked() { return this.value === this._jsonModel.enum?.[0]; }

  getState(e = !1, t = !1) { return { ...super.getState(e, t), checked: this.checked }; }
}O([function (e, t, i) { const n = i.get; n != null && (i.get = function () { return this.ruleEngine.trackDependency(this, t), n.call(this); }); }], It.prototype, 'checked', null); class Dt extends Et {
  constructor(e, t) { super(e, t); }

  _getFallbackType() { const e = super._getFallbackType(); return typeof e === 'string' ? `${e}[]` : 'string[]'; }

  _getDefaults() { return { ...super._getDefaults(), enforceEnum: !0, enum: [] }; }
} class $t extends Et {
  locale;

  _dataFormat = 'yyyy-MM-dd';

  _applyDefaults() { super._applyDefaults(), this.locale = (new Intl.DateTimeFormat()).resolvedOptions().locale, this._jsonModel.editFormat || (this._jsonModel.editFormat = 'short'), this._jsonModel.displayFormat || (this._jsonModel.displayFormat = this._jsonModel.editFormat), this._jsonModel.placeholder || (this._jsonModel.placeholder = D(this._jsonModel.editFormat, this.locale)); }

  #h(e) { const t = $(e); return isNaN(t) ? null : N(t, this.locale, this._dataFormat); }

  get value() { return super.value; }

  set value(e) { if (typeof e === 'number') { const t = this.#h(e); t && (super.value = t); } else if (this._jsonModel.editFormat !== 'short' && this._jsonModel.editFormat !== 'date|short') { const t = S(e, this.locale, this._jsonModel.editFormat) || S(e, this.locale, 'yyyy-MM-dd'); t instanceof Date ? super.value = N(t, this.locale, this._dataFormat) : super.value = e; } else super.value = e; }

  get minimum() { return super.minimum; }

  set minimum(e) { if (typeof e === 'number') { const t = this.#h(e); t && (super.minimum = t); } else typeof e === 'string' && (super.minimum = e); }

  get maximum() { return super.maximum; }

  set maximum(e) { if (typeof e === 'number') { const t = this.#h(e); t && (super.maximum = t); } else typeof e === 'string' && (super.maximum = e); }
} class Nt extends $t {
  _dataFormat = 'yyyy-MM-ddTHH:mm';

  _applyDefaults() { super._applyDefaults(); }

  get value() { return super.value; }

  set value(e) { super.value = e; }
} class St extends Et {_getDefaults() { return { ...super._getDefaults(), format: 'email' }; }} class Ot extends Et {
  _captchaDisplayMode;

  _captchaProvider;

  _captchaSiteKey;

  constructor(e, t) { super(e, t), this._captchaDisplayMode = e.captchaDisplayMode, this._captchaProvider = e.captchaProvider, this._captchaSiteKey = e.captchaSiteKey; }

  getDataNode() {}

  custom_setProperty(e) { this.applyUpdates(e.payload); }

  get captchaDisplayMode() { return this._captchaDisplayMode; }

  get captchaProvider() { return this._captchaProvider; }

  get captchaSiteKey() { return this._captchaSiteKey; }
} class Ct extends Et {click() { if (!this._events?.click && this._jsonModel.buttonType) return this._jsonModel.buttonType === 'submit' ? this.form.dispatch(new f({ validate_form: !0 })) : this._jsonModel.buttonType === 'reset' ? this.form.dispatch(new _()) : void 0; }} const At = {
  text: 'text-input', number: 'number-input', email: 'email', file: 'file-input', range: 'range', textarea: 'multiline-input',
}; const Ft = new class {
  createField(e, t) {
    let i; const n = { ...t, fieldFactory: this }; if (e.fieldType = e.fieldType ? e.fieldType in At ? At[e.fieldType] : e.fieldType : 'text-input', X(e)) {
      const t = {
        ...e, ...'items' in e && { type: 'object' }, minOccur: void 0, maxOccur: void 0, repeatable: void 0, name: void 0,
      }; const s = {
        minItems: e.minOccur || 0, maxItems: e.maxOccur || -1, fieldType: e.fieldType, type: 'array', name: e.name, dataRef: e.dataRef, events: { 'custom:setProperty': '$event.payload' }, items: [t],
      }; i = new bt(s, n);
    } else 'items' in e || e.fieldType === 'panel' ? i = new Mt(e, n) : B(e) || e.fieldType === 'file-input' ? i = new Tt(e, n) : (s = e, i = (s?.fieldType || Q(s)) === 'checkbox' ? new It(e, n) : (function (e) { return (e?.fieldType || Q(e)) === 'checkbox-group'; }(e)) ? new Dt(e, n) : (function (e) { const t = e?.fieldType || Q(e); return t === 'text-input' && e?.format === 'email' || t === 'email'; }(e)) ? new St(e, n) : (function (e) { const t = e?.fieldType || Q(e); return t === 'text-input' && e?.format === 'date' || t === 'date-input'; }(e)) ? new $t(e, n) : (function (e) { const t = e?.fieldType || Q(e); return t === 'text-input' && e?.format === 'date-time' || t === 'datetime-input'; }(e)) ? new Nt(e, n) : (function (e) { return (e?.fieldType || Q(e)) === 'captcha'; }(e)) ? new Ot(e, n) : (function (e) { return e?.fieldType === 'button'; }(e)) ? new Ct(e, n) : new Et(e, n)); let s; return i;
  }
}(); const kt = (e, t, i) => { let n = i; n == null && (e = we(e), n = new _t({ ...e }, Ft, new vt(), new nt(new tt(t)), t)); const s = e?.data; return s && n.importData(s), n; }; const Pt = (e, t, i = 'error', n = void 0) => { try { const s = kt(e, i, n); return typeof t === 'function' && t(s), s.getEventQueue().runPendingQueue(), s; } catch (e) { throw console.error(`Unable to create an instance of the Form ${e}`), new Error(e); } }; const
  Rt = async (e, t, i = 'error', n = void 0) => { try { const s = kt(e, i, n); return typeof t === 'function' && t(s), s.getEventQueue().runPendingQueue(), await s.waitForPromises(), s; } catch (e) { throw console.error(`Unable to create an instance of the Form ${e}`), new Error(e); } }; Pt.currentVersion = ft; const qt = { logLevel: 'error' }; const Vt = (e, t = null, { logLevel: i } = qt) => { try { const n = new _t({ ...e }, Ft, new vt(), new nt(new tt(i)), i, 'restore'); return t && (n.bindToDataModel(new ee('$form', t)), n.syncDataAndFormModel(n.getDataNode())), n.getEventQueue().empty(), n; } catch (e) { throw console.error(`Unable to restore an instance of the Form ${e}`), new Error(e); } }; const Lt = (e, t) => { try { const i = new _t({ ...e }, Ft, new vt()); return t && i.importData(t), i.validate().length === 0; } catch (e) { throw new Error(e); } }; const Ut = (e, t) => { try { const i = new _t({ ...e }, Ft, new vt()); t && i.importData(t); const n = i.validate(); return { messages: n, valid: n.length === 0 }; } catch (e) { throw new Error(e); } }; const zt = (e, t = {}) => { const i = new Headers(); return Object.entries(t).forEach((([e, t]) => { i.append(e, t); })), new Promise(((i, n) => { st(`${e}.model.json`, null, { headers: t }).then(((e) => { if (e.status !== 200)n('Not Found'); else { let t = e.body; if ('model' in t) { const { model: e } = t; t = e; }i(G(t)); } })).catch(((e) => { n(`Network error: ${e.message || e}`); })); })); }; const Ht = (e) => { pt.registerFunctions(e); }; export {
  Pt as createFormInstance, Rt as createFormInstanceSync, zt as fetchForm, Ht as registerFunctions, Vt as restoreFormInstance, Ut as validateFormData, Lt as validateFormInstance,
};
